var Zepto=function(){function t(t){return null==t?String(t):q[X.call(t)]||"object"}function e(e){return"function"==t(e)}function n(t){return null!=t&&t==t.window}function r(t){return null!=t&&t.nodeType==t.DOCUMENT_NODE}function i(e){return"object"==t(e)}function o(t){return i(t)&&!n(t)&&Object.getPrototypeOf(t)==Object.prototype}function a(t){return"number"==typeof t.length}function s(t){return O.call(t,function(t){return null!=t})}function u(t){return t.length>0?T.fn.concat.apply([],t):t}function c(t){return t.replace(/::/g,"/").replace(/([A-Z]+)([A-Z][a-z])/g,"$1_$2").replace(/([a-z\d])([A-Z])/g,"$1_$2").replace(/_/g,"-").toLowerCase()}function l(t){return t in F?F[t]:F[t]=new RegExp("(^|\\s)"+t+"(\\s|$)")}function f(t,e){return"number"!=typeof e||L[c(t)]?e:e+"px"}function h(t){var e,n;return j[t]||(e=P.createElement(t),P.body.appendChild(e),n=getComputedStyle(e,"").getPropertyValue("display"),e.parentNode.removeChild(e),"none"==n&&(n="block"),j[t]=n),j[t]}function d(t){return"children"in t?C.call(t.children):T.map(t.childNodes,function(t){return 1==t.nodeType?t:void 0})}function p(t,e){var n,r=t?t.length:0;for(n=0;r>n;n++)this[n]=t[n];this.length=r,this.selector=e||""}function m(t,e,n){for(M in e)n&&(o(e[M])||K(e[M]))?(o(e[M])&&!o(t[M])&&(t[M]={}),K(e[M])&&!K(t[M])&&(t[M]=[]),m(t[M],e[M],n)):e[M]!==D&&(t[M]=e[M])}function y(t,e){return null==e?T(t):T(t).filter(e)}function _(t,n,r,i){return e(n)?n.call(t,r,i):n}function g(t,e,n){null==n?t.removeAttribute(e):t.setAttribute(e,n)}function v(t,e){var n=t.className||"",r=n&&n.baseVal!==D;return e===D?r?n.baseVal:n:void(r?n.baseVal=e:t.className=e)}function w(t){try{return t?"true"==t||"false"!=t&&("null"==t?null:+t+""==t?+t:/^[\[\{]/.test(t)?T.parseJSON(t):t):t}catch(e){return t}}function b(t,e){e(t);for(var n=0,r=t.childNodes.length;r>n;n++)b(t.childNodes[n],e)}var D,M,T,Y,S,k,x=[],E=x.concat,O=x.filter,C=x.slice,P=window.document,j={},F={},L={"column-count":1,columns:1,"font-weight":1,"line-height":1,opacity:1,"z-index":1,zoom:1},z=/^\s*<(\w+|!)[^>]*>/,U=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,N=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,W=/^(?:body|html)$/i,G=/([A-Z])/g,A=["val","css","html","text","data","width","height","offset"],I=["after","prepend","before","append"],H=P.createElement("table"),Z=P.createElement("tr"),$={tr:P.createElement("tbody"),tbody:H,thead:H,tfoot:H,td:Z,th:Z,"*":P.createElement("div")},R=/complete|loaded|interactive/,V=/^[\w-]*$/,q={},X=q.toString,J={},B=P.createElement("div"),Q={tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},K=Array.isArray||function(t){return t instanceof Array};return J.matches=function(t,e){if(!e||!t||1!==t.nodeType)return!1;var n=t.webkitMatchesSelector||t.mozMatchesSelector||t.oMatchesSelector||t.matchesSelector;if(n)return n.call(t,e);var r,i=t.parentNode,o=!i;return o&&(i=B).appendChild(t),r=~J.qsa(i,e).indexOf(t),o&&B.removeChild(t),r},S=function(t){return t.replace(/-+(.)?/g,function(t,e){return e?e.toUpperCase():""})},k=function(t){return O.call(t,function(e,n){return t.indexOf(e)==n})},J.fragment=function(t,e,n){var r,i,a;return U.test(t)&&(r=T(P.createElement(RegExp.$1))),r||(t.replace&&(t=t.replace(N,"<$1></$2>")),e===D&&(e=z.test(t)&&RegExp.$1),e in $||(e="*"),a=$[e],a.innerHTML=""+t,r=T.each(C.call(a.childNodes),function(){a.removeChild(this)})),o(n)&&(i=T(r),T.each(n,function(t,e){A.indexOf(t)>-1?i[t](e):i.attr(t,e)})),r},J.Z=function(t,e){return new p(t,e)},J.isZ=function(t){return t instanceof J.Z},J.init=function(t,n){var r;if(!t)return J.Z();if("string"==typeof t)if(t=t.trim(),"<"==t[0]&&z.test(t))r=J.fragment(t,RegExp.$1,n),t=null;else{if(n!==D)return T(n).find(t);r=J.qsa(P,t)}else{if(e(t))return T(P).ready(t);if(J.isZ(t))return t;if(K(t))r=s(t);else if(i(t))r=[t],t=null;else if(z.test(t))r=J.fragment(t.trim(),RegExp.$1,n),t=null;else{if(n!==D)return T(n).find(t);r=J.qsa(P,t)}}return J.Z(r,t)},T=function(t,e){return J.init(t,e)},T.extend=function(t){var e,n=C.call(arguments,1);return"boolean"==typeof t&&(e=t,t=n.shift()),n.forEach(function(n){m(t,n,e)}),t},J.qsa=function(t,e){var n,r="#"==e[0],i=!r&&"."==e[0],o=r||i?e.slice(1):e,a=V.test(o);return t.getElementById&&a&&r?(n=t.getElementById(o))?[n]:[]:1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType?[]:C.call(a&&!r&&t.getElementsByClassName?i?t.getElementsByClassName(o):t.getElementsByTagName(e):t.querySelectorAll(e))},T.contains=P.documentElement.contains?function(t,e){return t!==e&&t.contains(e)}:function(t,e){for(;e&&(e=e.parentNode);)if(e===t)return!0;return!1},T.type=t,T.isFunction=e,T.isWindow=n,T.isArray=K,T.isPlainObject=o,T.isEmptyObject=function(t){var e;for(e in t)return!1;return!0},T.inArray=function(t,e,n){return x.indexOf.call(e,t,n)},T.camelCase=S,T.trim=function(t){return null==t?"":String.prototype.trim.call(t)},T.uuid=0,T.support={},T.expr={},T.noop=function(){},T.map=function(t,e){var n,r,i,o=[];if(a(t))for(r=0;r<t.length;r++)n=e(t[r],r),null!=n&&o.push(n);else for(i in t)n=e(t[i],i),null!=n&&o.push(n);return u(o)},T.each=function(t,e){var n,r;if(a(t)){for(n=0;n<t.length;n++)if(e.call(t[n],n,t[n])===!1)return t}else for(r in t)if(e.call(t[r],r,t[r])===!1)return t;return t},T.grep=function(t,e){return O.call(t,e)},window.JSON&&(T.parseJSON=JSON.parse),T.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){q["[object "+e+"]"]=e.toLowerCase()}),T.fn={constructor:J.Z,length:0,forEach:x.forEach,reduce:x.reduce,push:x.push,sort:x.sort,splice:x.splice,indexOf:x.indexOf,concat:function(){var t,e,n=[];for(t=0;t<arguments.length;t++)e=arguments[t],n[t]=J.isZ(e)?e.toArray():e;return E.apply(J.isZ(this)?this.toArray():this,n)},map:function(t){return T(T.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return T(C.apply(this,arguments))},ready:function(t){return R.test(P.readyState)&&P.body?t(T):P.addEventListener("DOMContentLoaded",function(){t(T)},!1),this},get:function(t){return t===D?C.call(this):this[t>=0?t:t+this.length]},toArray:function(){return this.get()},size:function(){return this.length},remove:function(){return this.each(function(){null!=this.parentNode&&this.parentNode.removeChild(this)})},each:function(t){return x.every.call(this,function(e,n){return t.call(e,n,e)!==!1}),this},filter:function(t){return e(t)?this.not(this.not(t)):T(O.call(this,function(e){return J.matches(e,t)}))},add:function(t,e){return T(k(this.concat(T(t,e))))},is:function(t){return this.length>0&&J.matches(this[0],t)},not:function(t){var n=[];if(e(t)&&t.call!==D)this.each(function(e){t.call(this,e)||n.push(this)});else{var r="string"==typeof t?this.filter(t):a(t)&&e(t.item)?C.call(t):T(t);this.forEach(function(t){r.indexOf(t)<0&&n.push(t)})}return T(n)},has:function(t){return this.filter(function(){return i(t)?T.contains(this,t):T(this).find(t).size()})},eq:function(t){return-1===t?this.slice(t):this.slice(t,+t+1)},first:function(){var t=this[0];return t&&!i(t)?t:T(t)},last:function(){var t=this[this.length-1];return t&&!i(t)?t:T(t)},find:function(t){var e,n=this;return e=t?"object"==typeof t?T(t).filter(function(){var t=this;return x.some.call(n,function(e){return T.contains(e,t)})}):1==this.length?T(J.qsa(this[0],t)):this.map(function(){return J.qsa(this,t)}):T()},closest:function(t,e){var n=this[0],i=!1;for("object"==typeof t&&(i=T(t));n&&!(i?i.indexOf(n)>=0:J.matches(n,t));)n=n!==e&&!r(n)&&n.parentNode;return T(n)},parents:function(t){for(var e=[],n=this;n.length>0;)n=T.map(n,function(t){return(t=t.parentNode)&&!r(t)&&e.indexOf(t)<0?(e.push(t),t):void 0});return y(e,t)},parent:function(t){return y(k(this.pluck("parentNode")),t)},children:function(t){return y(this.map(function(){return d(this)}),t)},contents:function(){return this.map(function(){return this.contentDocument||C.call(this.childNodes)})},siblings:function(t){return y(this.map(function(t,e){return O.call(d(e.parentNode),function(t){return t!==e})}),t)},empty:function(){return this.each(function(){this.innerHTML=""})},pluck:function(t){return T.map(this,function(e){return e[t]})},show:function(){return this.each(function(){"none"==this.style.display&&(this.style.display=""),"none"==getComputedStyle(this,"").getPropertyValue("display")&&(this.style.display=h(this.nodeName))})},replaceWith:function(t){return this.before(t).remove()},wrap:function(t){var n=e(t);if(this[0]&&!n)var r=T(t).get(0),i=r.parentNode||this.length>1;return this.each(function(e){T(this).wrapAll(n?t.call(this,e):i?r.cloneNode(!0):r)})},wrapAll:function(t){if(this[0]){T(this[0]).before(t=T(t));for(var e;(e=t.children()).length;)t=e.first();T(t).append(this)}return this},wrapInner:function(t){var n=e(t);return this.each(function(e){var r=T(this),i=r.contents(),o=n?t.call(this,e):t;i.length?i.wrapAll(o):r.append(o)})},unwrap:function(){return this.parent().each(function(){T(this).replaceWith(T(this).children())}),this},clone:function(){return this.map(function(){return this.cloneNode(!0)})},hide:function(){return this.css("display","none")},toggle:function(t){return this.each(function(){var e=T(this);(t===D?"none"==e.css("display"):t)?e.show():e.hide()})},prev:function(t){return T(this.pluck("previousElementSibling")).filter(t||"*")},next:function(t){return T(this.pluck("nextElementSibling")).filter(t||"*")},html:function(t){return 0 in arguments?this.each(function(e){var n=this.innerHTML;T(this).empty().append(_(this,t,e,n))}):0 in this?this[0].innerHTML:null},text:function(t){return 0 in arguments?this.each(function(e){var n=_(this,t,e,this.textContent);this.textContent=null==n?"":""+n}):0 in this?this.pluck("textContent").join(""):null},attr:function(t,e){var n;return"string"!=typeof t||1 in arguments?this.each(function(n){if(1===this.nodeType)if(i(t))for(M in t)g(this,M,t[M]);else g(this,t,_(this,e,n,this.getAttribute(t)))}):this.length&&1===this[0].nodeType?!(n=this[0].getAttribute(t))&&t in this[0]?this[0][t]:n:D},removeAttr:function(t){return this.each(function(){1===this.nodeType&&t.split(" ").forEach(function(t){g(this,t)},this)})},prop:function(t,e){return t=Q[t]||t,1 in arguments?this.each(function(n){this[t]=_(this,e,n,this[t])}):this[0]&&this[0][t]},data:function(t,e){var n="data-"+t.replace(G,"-$1").toLowerCase(),r=1 in arguments?this.attr(n,e):this.attr(n);return null!==r?w(r):D},val:function(t){return 0 in arguments?this.each(function(e){this.value=_(this,t,e,this.value)}):this[0]&&(this[0].multiple?T(this[0]).find("option").filter(function(){return this.selected}).pluck("value"):this[0].value)},offset:function(t){if(t)return this.each(function(e){var n=T(this),r=_(this,t,e,n.offset()),i=n.offsetParent().offset(),o={top:r.top-i.top,left:r.left-i.left};"static"==n.css("position")&&(o.position="relative"),n.css(o)});if(!this.length)return null;if(!T.contains(P.documentElement,this[0]))return{top:0,left:0};var e=this[0].getBoundingClientRect();return{left:e.left+window.pageXOffset,top:e.top+window.pageYOffset,width:Math.round(e.width),height:Math.round(e.height)}},css:function(e,n){if(arguments.length<2){var r,i=this[0];if(!i)return;if(r=getComputedStyle(i,""),"string"==typeof e)return i.style[S(e)]||r.getPropertyValue(e);if(K(e)){var o={};return T.each(e,function(t,e){o[e]=i.style[S(e)]||r.getPropertyValue(e)}),o}}var a="";if("string"==t(e))n||0===n?a=c(e)+":"+f(e,n):this.each(function(){this.style.removeProperty(c(e))});else for(M in e)e[M]||0===e[M]?a+=c(M)+":"+f(M,e[M])+";":this.each(function(){this.style.removeProperty(c(M))});return this.each(function(){this.style.cssText+=";"+a})},index:function(t){return t?this.indexOf(T(t)[0]):this.parent().children().indexOf(this[0])},hasClass:function(t){return!!t&&x.some.call(this,function(t){return this.test(v(t))},l(t))},addClass:function(t){return t?this.each(function(e){if("className"in this){Y=[];var n=v(this),r=_(this,t,e,n);r.split(/\s+/g).forEach(function(t){T(this).hasClass(t)||Y.push(t)},this),Y.length&&v(this,n+(n?" ":"")+Y.join(" "))}}):this},removeClass:function(t){return this.each(function(e){if("className"in this){if(t===D)return v(this,"");Y=v(this),_(this,t,e,Y).split(/\s+/g).forEach(function(t){Y=Y.replace(l(t)," ")}),v(this,Y.trim())}})},toggleClass:function(t,e){return t?this.each(function(n){var r=T(this),i=_(this,t,n,v(this));i.split(/\s+/g).forEach(function(t){(e===D?!r.hasClass(t):e)?r.addClass(t):r.removeClass(t)})}):this},scrollTop:function(t){if(this.length){var e="scrollTop"in this[0];return t===D?e?this[0].scrollTop:this[0].pageYOffset:this.each(e?function(){this.scrollTop=t}:function(){this.scrollTo(this.scrollX,t)})}},scrollLeft:function(t){if(this.length){var e="scrollLeft"in this[0];return t===D?e?this[0].scrollLeft:this[0].pageXOffset:this.each(e?function(){this.scrollLeft=t}:function(){this.scrollTo(t,this.scrollY)})}},position:function(){if(this.length){var t=this[0],e=this.offsetParent(),n=this.offset(),r=W.test(e[0].nodeName)?{top:0,left:0}:e.offset();return n.top-=parseFloat(T(t).css("margin-top"))||0,n.left-=parseFloat(T(t).css("margin-left"))||0,r.top+=parseFloat(T(e[0]).css("border-top-width"))||0,r.left+=parseFloat(T(e[0]).css("border-left-width"))||0,{top:n.top-r.top,left:n.left-r.left}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||P.body;t&&!W.test(t.nodeName)&&"static"==T(t).css("position");)t=t.offsetParent;return t})}},T.fn.detach=T.fn.remove,["width","height"].forEach(function(t){var e=t.replace(/./,function(t){return t[0].toUpperCase()});T.fn[t]=function(i){var o,a=this[0];return i===D?n(a)?a["inner"+e]:r(a)?a.documentElement["scroll"+e]:(o=this.offset())&&o[t]:this.each(function(e){a=T(this),a.css(t,_(this,i,e,a[t]()))})}}),I.forEach(function(e,n){var r=n%2;T.fn[e]=function(){var e,i,o=T.map(arguments,function(n){return e=t(n),"object"==e||"array"==e||null==n?n:J.fragment(n)}),a=this.length>1;return o.length<1?this:this.each(function(t,e){i=r?e:e.parentNode,e=0==n?e.nextSibling:1==n?e.firstChild:2==n?e:null;var s=T.contains(P.documentElement,i);o.forEach(function(t){if(a)t=t.cloneNode(!0);else if(!i)return T(t).remove();i.insertBefore(t,e),s&&b(t,function(t){null==t.nodeName||"SCRIPT"!==t.nodeName.toUpperCase()||t.type&&"text/javascript"!==t.type||t.src||window.eval.call(window,t.innerHTML)})})})},T.fn[r?e+"To":"insert"+(n?"Before":"After")]=function(t){return T(t)[e](this),this}}),J.Z.prototype=p.prototype=T.fn,J.uniq=k,J.deserializeValue=w,T.zepto=J,T}();window.Zepto=Zepto,void 0===window.$&&(window.$=Zepto),function(t){function e(t){return t._zid||(t._zid=h++)}function n(t,n,o,a){if(n=r(n),n.ns)var s=i(n.ns);return(y[e(t)]||[]).filter(function(t){return t&&(!n.e||t.e==n.e)&&(!n.ns||s.test(t.ns))&&(!o||e(t.fn)===e(o))&&(!a||t.sel==a)})}function r(t){var e=(""+t).split(".");return{e:e[0],ns:e.slice(1).sort().join(" ")}}function i(t){return new RegExp("(?:^| )"+t.replace(" "," .* ?")+"(?: |$)")}function o(t,e){return t.del&&!g&&t.e in v||!!e}function a(t){return w[t]||g&&v[t]||t}function s(n,i,s,u,l,h,d){var p=e(n),m=y[p]||(y[p]=[]);i.split(/\s/).forEach(function(e){if("ready"==e)return t(document).ready(s);var i=r(e);i.fn=s,i.sel=l,i.e in w&&(s=function(e){var n=e.relatedTarget;return!n||n!==this&&!t.contains(this,n)?i.fn.apply(this,arguments):void 0}),i.del=h;var p=h||s;i.proxy=function(t){if(t=c(t),!t.isImmediatePropagationStopped()){t.data=u;var e=p.apply(n,t._args==f?[t]:[t].concat(t._args));return e===!1&&(t.preventDefault(),t.stopPropagation()),e}},i.i=m.length,m.push(i),"addEventListener"in n&&n.addEventListener(a(i.e),i.proxy,o(i,d))})}function u(t,r,i,s,u){var c=e(t);(r||"").split(/\s/).forEach(function(e){n(t,e,i,s).forEach(function(e){delete y[c][e.i],"removeEventListener"in t&&t.removeEventListener(a(e.e),e.proxy,o(e,u))})})}function c(e,n){return(n||!e.isDefaultPrevented)&&(n||(n=e),t.each(T,function(t,r){var i=n[t];e[t]=function(){return this[r]=b,i&&i.apply(n,arguments)},e[r]=D}),(n.defaultPrevented!==f?n.defaultPrevented:"returnValue"in n?n.returnValue===!1:n.getPreventDefault&&n.getPreventDefault())&&(e.isDefaultPrevented=b)),e}function l(t){var e,n={originalEvent:t};for(e in t)M.test(e)||t[e]===f||(n[e]=t[e]);return c(n,t)}var f,h=1,d=Array.prototype.slice,p=t.isFunction,m=function(t){return"string"==typeof t},y={},_={},g="onfocusin"in window,v={focus:"focusin",blur:"focusout"},w={mouseenter:"mouseover",mouseleave:"mouseout"};_.click=_.mousedown=_.mouseup=_.mousemove="MouseEvents",t.event={add:s,remove:u},t.proxy=function(n,r){var i=2 in arguments&&d.call(arguments,2);if(p(n)){var o=function(){return n.apply(r,i?i.concat(d.call(arguments)):arguments)};return o._zid=e(n),o}if(m(r))return i?(i.unshift(n[r],n),t.proxy.apply(null,i)):t.proxy(n[r],n);throw new TypeError("expected function")},t.fn.bind=function(t,e,n){return this.on(t,e,n)},t.fn.unbind=function(t,e){return this.off(t,e)},t.fn.one=function(t,e,n,r){return this.on(t,e,n,r,1)};var b=function(){return!0},D=function(){return!1},M=/^([A-Z]|returnValue$|layer[XY]$)/,T={preventDefault:"isDefaultPrevented",stopImmediatePropagation:"isImmediatePropagationStopped",stopPropagation:"isPropagationStopped"};t.fn.delegate=function(t,e,n){return this.on(e,t,n)},t.fn.undelegate=function(t,e,n){return this.off(e,t,n)},t.fn.live=function(e,n){return t(document.body).delegate(this.selector,e,n),this},t.fn.die=function(e,n){return t(document.body).undelegate(this.selector,e,n),this},t.fn.on=function(e,n,r,i,o){var a,c,h=this;return e&&!m(e)?(t.each(e,function(t,e){h.on(t,n,r,e,o)}),h):(m(n)||p(i)||i===!1||(i=r,r=n,n=f),(i===f||r===!1)&&(i=r,r=f),i===!1&&(i=D),h.each(function(f,h){o&&(a=function(t){return u(h,t.type,i),i.apply(this,arguments)}),n&&(c=function(e){var r,o=t(e.target).closest(n,h).get(0);return o&&o!==h?(r=t.extend(l(e),{currentTarget:o,liveFired:h}),(a||i).apply(o,[r].concat(d.call(arguments,1)))):void 0}),s(h,e,i,r,n,c||a)}))},t.fn.off=function(e,n,r){var i=this;return e&&!m(e)?(t.each(e,function(t,e){i.off(t,n,e)}),i):(m(n)||p(r)||r===!1||(r=n,n=f),r===!1&&(r=D),i.each(function(){u(this,e,r,n)}))},t.fn.trigger=function(e,n){return e=m(e)||t.isPlainObject(e)?t.Event(e):c(e),e._args=n,this.each(function(){e.type in v&&"function"==typeof this[e.type]?this[e.type]():"dispatchEvent"in this?this.dispatchEvent(e):t(this).triggerHandler(e,n)})},t.fn.triggerHandler=function(e,r){var i,o;return this.each(function(a,s){i=l(m(e)?t.Event(e):e),i._args=r,i.target=s,t.each(n(s,e.type||e),function(t,e){return o=e.proxy(i),!i.isImmediatePropagationStopped()&&void 0})}),o},"focusin focusout focus blur load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select keydown keypress keyup error".split(" ").forEach(function(e){t.fn[e]=function(t){return 0 in arguments?this.bind(e,t):this.trigger(e)}}),t.Event=function(t,e){m(t)||(e=t,t=e.type);var n=document.createEvent(_[t]||"Events"),r=!0;if(e)for(var i in e)"bubbles"==i?r=!!e[i]:n[i]=e[i];return n.initEvent(t,r,!0),c(n)}}(Zepto),function(t){function e(e,n,r){var i=t.Event(n);return t(e).trigger(i,r),!i.isDefaultPrevented()}function n(t,n,r,i){return t.global?e(n||g,r,i):void 0}function r(e){e.global&&0===t.active++&&n(e,null,"ajaxStart")}function i(e){e.global&&!--t.active&&n(e,null,"ajaxStop")}function o(t,e){var r=e.context;return e.beforeSend.call(r,t,e)!==!1&&n(e,r,"ajaxBeforeSend",[t,e])!==!1&&void n(e,r,"ajaxSend",[t,e])}function a(t,e,r,i){var o=r.context,a="success";r.success.call(o,t,a,e),i&&i.resolveWith(o,[t,a,e]),n(r,o,"ajaxSuccess",[e,r,t]),u(a,e,r)}function s(t,e,r,i,o){var a=i.context;i.error.call(a,r,e,t),o&&o.rejectWith(a,[r,e,t]),n(i,a,"ajaxError",[r,i,t||e]),u(e,r,i)}function u(t,e,r){var o=r.context;r.complete.call(o,e,t),n(r,o,"ajaxComplete",[e,r]),i(r)}function c(){}function l(t){return t&&(t=t.split(";",2)[0]),t&&(t==M?"html":t==D?"json":w.test(t)?"script":b.test(t)&&"xml")||"text"}function f(t,e){return""==e?t:(t+"&"+e).replace(/[&?]{1,2}/,"?")}function h(e){e.processData&&e.data&&"string"!=t.type(e.data)&&(e.data=t.param(e.data,e.traditional)),!e.data||e.type&&"GET"!=e.type.toUpperCase()||(e.url=f(e.url,e.data),e.data=void 0)}function d(e,n,r,i){return t.isFunction(n)&&(i=r,r=n,n=void 0),t.isFunction(r)||(i=r,r=void 0),{url:e,data:n,success:r,dataType:i}}function p(e,n,r,i){var o,a=t.isArray(n),s=t.isPlainObject(n);t.each(n,function(n,u){o=t.type(u),i&&(n=r?i:i+"["+(s||"object"==o||"array"==o?n:"")+"]"),!i&&a?e.add(u.name,u.value):"array"==o||!r&&"object"==o?p(e,u,r,n):e.add(n,u)})}var m,y,_=0,g=window.document,v=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,w=/^(?:text|application)\/javascript/i,b=/^(?:text|application)\/xml/i,D="application/json",M="text/html",T=/^\s*$/,Y=g.createElement("a");Y.href=window.location.href,t.active=0,t.ajaxJSONP=function(e,n){if(!("type"in e))return t.ajax(e);var r,i,u=e.jsonpCallback,c=(t.isFunction(u)?u():u)||"jsonp"+ ++_,l=g.createElement("script"),f=window[c],h=function(e){t(l).triggerHandler("error",e||"abort")},d={abort:h};return n&&n.promise(d),t(l).on("load error",function(o,u){clearTimeout(i),t(l).off().remove(),"error"!=o.type&&r?a(r[0],d,e,n):s(null,u||"error",d,e,n),window[c]=f,r&&t.isFunction(f)&&f(r[0]),f=r=void 0}),o(d,e)===!1?(h("abort"),d):(window[c]=function(){r=arguments},l.src=e.url.replace(/\?(.+)=\?/,"?$1="+c),g.head.appendChild(l),e.timeout>0&&(i=setTimeout(function(){h("timeout")},e.timeout)),d)},t.ajaxSettings={type:"GET",beforeSend:c,success:c,error:c,complete:c,context:null,global:!0,xhr:function(){return new window.XMLHttpRequest},accepts:{script:"text/javascript, application/javascript, application/x-javascript",json:D,xml:"application/xml, text/xml",html:M,text:"text/plain"},crossDomain:!1,timeout:0,processData:!0,cache:!0},t.ajax=function(e){var n,i,u=t.extend({},e||{}),d=t.Deferred&&t.Deferred();for(m in t.ajaxSettings)void 0===u[m]&&(u[m]=t.ajaxSettings[m]);r(u),u.crossDomain||(n=g.createElement("a"),n.href=u.url,n.href=n.href,u.crossDomain=Y.protocol+"//"+Y.host!=n.protocol+"//"+n.host),u.url||(u.url=window.location.toString()),(i=u.url.indexOf("#"))>-1&&(u.url=u.url.slice(0,i)),h(u);var p=u.dataType,_=/\?.+=\?/.test(u.url);if(_&&(p="jsonp"),u.cache!==!1&&(e&&e.cache===!0||"script"!=p&&"jsonp"!=p)||(u.url=f(u.url,"_="+Date.now())),"jsonp"==p)return _||(u.url=f(u.url,u.jsonp?u.jsonp+"=?":u.jsonp===!1?"":"callback=?")),t.ajaxJSONP(u,d);var v,w=u.accepts[p],b={},D=function(t,e){b[t.toLowerCase()]=[t,e]},M=/^([\w-]+:)\/\//.test(u.url)?RegExp.$1:window.location.protocol,S=u.xhr(),k=S.setRequestHeader;if(d&&d.promise(S),u.crossDomain||D("X-Requested-With","XMLHttpRequest"),D("Accept",w||"*/*"),(w=u.mimeType||w)&&(w.indexOf(",")>-1&&(w=w.split(",",2)[0]),S.overrideMimeType&&S.overrideMimeType(w)),(u.contentType||u.contentType!==!1&&u.data&&"GET"!=u.type.toUpperCase())&&D("Content-Type",u.contentType||"application/x-www-form-urlencoded"),u.headers)for(y in u.headers)D(y,u.headers[y]);if(S.setRequestHeader=D,S.onreadystatechange=function(){if(4==S.readyState){S.onreadystatechange=c,clearTimeout(v);var e,n=!1;if(S.status>=200&&S.status<300||304==S.status||0==S.status&&"file:"==M){if(p=p||l(u.mimeType||S.getResponseHeader("content-type")),"arraybuffer"==S.responseType||"blob"==S.responseType)e=S.response;else{e=S.responseText;try{"script"==p?(0,eval)(e):"xml"==p?e=S.responseXML:"json"==p&&(e=T.test(e)?null:t.parseJSON(e))}catch(r){n=r}if(n)return s(n,"parsererror",S,u,d)}a(e,S,u,d)}else s(S.statusText||null,S.status?"error":"abort",S,u,d)}},o(S,u)===!1)return S.abort(),s(null,"abort",S,u,d),S;if(u.xhrFields)for(y in u.xhrFields)S[y]=u.xhrFields[y];var x=!("async"in u)||u.async;S.open(u.type,u.url,x,u.username,u.password);for(y in b)k.apply(S,b[y]);return u.timeout>0&&(v=setTimeout(function(){S.onreadystatechange=c,S.abort(),s(null,"timeout",S,u,d)},u.timeout)),S.send(u.data?u.data:null),S},t.get=function(){return t.ajax(d.apply(null,arguments))},t.post=function(){var e=d.apply(null,arguments);return e.type="POST",t.ajax(e)},t.getJSON=function(){var e=d.apply(null,arguments);return e.dataType="json",t.ajax(e)},t.fn.load=function(e,n,r){if(!this.length)return this;var i,o=this,a=e.split(/\s/),s=d(e,n,r),u=s.success;return a.length>1&&(s.url=a[0],i=a[1]),s.success=function(e){o.html(i?t("<div>").html(e.replace(v,"")).find(i):e),u&&u.apply(o,arguments)},t.ajax(s),this};var S=encodeURIComponent;t.param=function(e,n){var r=[];return r.add=function(e,n){t.isFunction(n)&&(n=n()),null==n&&(n=""),this.push(S(e)+"="+S(n))},p(r,e,n),r.join("&").replace(/%20/g,"+")}}(Zepto),function(t){t.fn.serializeArray=function(){var e,n,r=[],i=function(t){return t.forEach?t.forEach(i):void r.push({name:e,value:t})};return this[0]&&t.each(this[0].elements,function(r,o){n=o.type,e=o.name,e&&"fieldset"!=o.nodeName.toLowerCase()&&!o.disabled&&"submit"!=n&&"reset"!=n&&"button"!=n&&"file"!=n&&("radio"!=n&&"checkbox"!=n||o.checked)&&i(t(o).val())}),r},t.fn.serialize=function(){var t=[];return this.serializeArray().forEach(function(e){t.push(encodeURIComponent(e.name)+"="+encodeURIComponent(e.value))}),t.join("&")},t.fn.submit=function(e){if(0 in arguments)this.bind("submit",e);else if(this.length){var n=t.Event("submit");this.eq(0).trigger(n),n.isDefaultPrevented()||this.get(0).submit()}return this}}(Zepto),function(){try{getComputedStyle(void 0)}catch(t){var e=getComputedStyle;window.getComputedStyle=function(t){try{return e(t)}catch(n){return null}}}}(),function(t){function e(t){return t._zid||(t._zid=h++)}function n(t,n,o,a){if(n=r(n),n.ns)var s=i(n.ns);return(y[e(t)]||[]).filter(function(t){return t&&(!n.e||t.e==n.e)&&(!n.ns||s.test(t.ns))&&(!o||e(t.fn)===e(o))&&(!a||t.sel==a)})}function r(t){var e=(""+t).split(".");return{e:e[0],ns:e.slice(1).sort().join(" ")}}function i(t){return new RegExp("(?:^| )"+t.replace(" "," .* ?")+"(?: |$)")}function o(t,e){return t.del&&!g&&t.e in v||!!e}function a(t){return w[t]||g&&v[t]||t}function s(n,i,s,u,l,h,d){var p=e(n),m=y[p]||(y[p]=[]);i.split(/\s/).forEach(function(e){if("ready"==e)return t(document).ready(s);var i=r(e);i.fn=s,i.sel=l,i.e in w&&(s=function(e){var n=e.relatedTarget;if(!n||n!==this&&!t.contains(this,n))return i.fn.apply(this,arguments)}),i.del=h;var p=h||s;i.proxy=function(t){if(t=c(t),!t.isImmediatePropagationStopped()){t.data=u;var e=p.apply(n,t._args==f?[t]:[t].concat(t._args));return e===!1&&(t.preventDefault(),t.stopPropagation()),e}},i.i=m.length,m.push(i),"addEventListener"in n&&n.addEventListener(a(i.e),i.proxy,o(i,d))})}function u(t,r,i,s,u){var c=e(t);(r||"").split(/\s/).forEach(function(e){n(t,e,i,s).forEach(function(e){delete y[c][e.i],"removeEventListener"in t&&t.removeEventListener(a(e.e),e.proxy,o(e,u))})})}function c(e,n){return!n&&e.isDefaultPrevented||(n||(n=e),t.each(T,function(t,r){var i=n[t];e[t]=function(){return this[r]=b,i&&i.apply(n,arguments)},e[r]=D}),(n.defaultPrevented!==f?n.defaultPrevented:"returnValue"in n?n.returnValue===!1:n.getPreventDefault&&n.getPreventDefault())&&(e.isDefaultPrevented=b)),e}function l(t){var e,n={originalEvent:t};for(e in t)M.test(e)||t[e]===f||(n[e]=t[e]);return c(n,t)}var f,h=1,d=Array.prototype.slice,p=t.isFunction,m=function(t){return"string"==typeof t},y={},_={},g="onfocusin"in window,v={focus:"focusin",blur:"focusout"},w={mouseenter:"mouseover",mouseleave:"mouseout"};_.click=_.mousedown=_.mouseup=_.mousemove="MouseEvents",t.event={add:s,remove:u},t.proxy=function(n,r){var i=2 in arguments&&d.call(arguments,2);if(p(n)){var o=function(){return n.apply(r,i?i.concat(d.call(arguments)):arguments)};return o._zid=e(n),o}if(m(r))return i?(i.unshift(n[r],n),t.proxy.apply(null,i)):t.proxy(n[r],n);throw new TypeError("expected function")},t.fn.bind=function(t,e,n){return this.on(t,e,n)},t.fn.unbind=function(t,e){return this.off(t,e)},t.fn.one=function(t,e,n,r){return this.on(t,e,n,r,1)};var b=function(){return!0},D=function(){return!1},M=/^([A-Z]|returnValue$|layer[XY]$)/,T={preventDefault:"isDefaultPrevented",stopImmediatePropagation:"isImmediatePropagationStopped",stopPropagation:"isPropagationStopped"};t.fn.delegate=function(t,e,n){return this.on(e,t,n)},t.fn.undelegate=function(t,e,n){return this.off(e,t,n)},t.fn.live=function(e,n){return t(document.body).delegate(this.selector,e,n),this},t.fn.die=function(e,n){return t(document.body).undelegate(this.selector,e,n),this},t.fn.on=function(e,n,r,i,o){var a,c,h=this;return e&&!m(e)?(t.each(e,function(t,e){h.on(t,n,r,e,o)}),h):(m(n)||p(i)||i===!1||(i=r,r=n,n=f),i!==f&&r!==!1||(i=r,r=f),i===!1&&(i=D),h.each(function(f,h){o&&(a=function(t){return u(h,t.type,i),i.apply(this,arguments)}),n&&(c=function(e){var r,o=t(e.target).closest(n,h).get(0);if(o&&o!==h)return r=t.extend(l(e),{currentTarget:o,liveFired:h}),(a||i).apply(o,[r].concat(d.call(arguments,1)))}),s(h,e,i,r,n,c||a)}))},t.fn.off=function(e,n,r){var i=this;return e&&!m(e)?(t.each(e,function(t,e){i.off(t,n,e)}),i):(m(n)||p(r)||r===!1||(r=n,n=f),r===!1&&(r=D),i.each(function(){u(this,e,r,n)}))},t.fn.trigger=function(e,n){return e=m(e)||t.isPlainObject(e)?t.Event(e):c(e),e._args=n,this.each(function(){e.type in v&&"function"==typeof this[e.type]?this[e.type]():"dispatchEvent"in this?this.dispatchEvent(e):t(this).triggerHandler(e,n)})},t.fn.triggerHandler=function(e,r){var i,o;return this.each(function(a,s){i=l(m(e)?t.Event(e):e),i._args=r,i.target=s,t.each(n(s,e.type||e),function(t,e){if(o=e.proxy(i),i.isImmediatePropagationStopped())return!1})}),o},"focusin focusout focus blur load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select keydown keypress keyup error".split(" ").forEach(function(e){t.fn[e]=function(t){return 0 in arguments?this.bind(e,t):this.trigger(e)}}),t.Event=function(t,e){m(t)||(e=t,t=e.type);var n=document.createEvent(_[t]||"Events"),r=!0;if(e)for(var i in e)"bubbles"==i?r=!!e[i]:n[i]=e[i];return n.initEvent(t,r,!0),c(n)}}(Zepto),function(t){function e(t,e,n,r){return Math.abs(t-e)>=Math.abs(n-r)?t-e>0?"Left":"Right":n-r>0?"Up":"Down"}function n(){l=null,h.last&&(h.el.trigger("longTap"),h={})}function r(){l&&clearTimeout(l),l=null}function i(){s&&clearTimeout(s),u&&clearTimeout(u),c&&clearTimeout(c),l&&clearTimeout(l),s=u=c=l=null,h={}}function o(t){return("touch"==t.pointerType||t.pointerType==t.MSPOINTER_TYPE_TOUCH)&&t.isPrimary}function a(t,e){return t.type=="pointer"+e||t.type.toLowerCase()=="mspointer"+e}var s,u,c,l,f,h={},d=750;t(document).ready(function(){var p,m,y,_,g=0,v=0;"MSGesture"in window&&(f=new MSGesture,f.target=document.body),t(document).bind("MSGestureEnd",function(t){var e=t.velocityX>1?"Right":t.velocityX<-1?"Left":t.velocityY>1?"Down":t.velocityY<-1?"Up":null;e&&(h.el.trigger("swipe"),h.el.trigger("swipe"+e))}).on("touchstart MSPointerDown pointerdown",function(e){(_=a(e,"down"))&&!o(e)||(y=_?e:e.touches[0],e.touches&&1===e.touches.length&&h.x2&&(h.x2=void 0,h.y2=void 0),p=Date.now(),m=p-(h.last||p),h.el=t("tagName"in y.target?y.target:y.target.parentNode),s&&clearTimeout(s),h.x1=y.pageX,h.y1=y.pageY,m>0&&m<=250&&(h.isDoubleTap=!0),h.last=p,l=setTimeout(n,d),f&&_&&f.addPointer(e.pointerId))}).on("touchmove MSPointerMove pointermove",function(t){(_=a(t,"move"))&&!o(t)||(y=_?t:t.touches[0],r(),h.x2=y.pageX,h.y2=y.pageY,g+=Math.abs(h.x1-h.x2),v+=Math.abs(h.y1-h.y2))}).on("touchend MSPointerUp pointerup",function(n){(_=a(n,"up"))&&!o(n)||(r(),h.x2&&Math.abs(h.x1-h.x2)>30||h.y2&&Math.abs(h.y1-h.y2)>30?c=setTimeout(function(){h.el.trigger("swipe"),h.el.trigger("swipe"+e(h.x1,h.x2,h.y1,h.y2)),h={}},0):"last"in h&&(g<30&&v<30?u=setTimeout(function(){var e=t.Event("tap");e.cancelTouch=i,h.el.trigger(e),h.isDoubleTap?(h.el&&h.el.trigger("doubleTap"),h={}):s=setTimeout(function(){s=null,h.el&&h.el.trigger("singleTap"),h={}},250)},0):h={}),g=v=0)}).on("touchcancel MSPointerCancel pointercancel",i),t(window).on("scroll",i)}),["swipe","swipeLeft","swipeRight","swipeUp","swipeDown","doubleTap","tap","singleTap","longTap"].forEach(function(e){t.fn[e]=function(t){
    return this.on(e,t)}})}(Zepto),function(t){function e(t,e,n){switch(arguments.length){case 2:return null!=t?t:e;case 3:return null!=t?t:null!=e?e:n;default:throw new Error("Implement me")}}function n(t,e){return Yt.call(t,e)}function r(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function i(t){vt.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function o(t,e){var n=!0;return h(function(){return n&&(i(t),n=!1),e.apply(this,arguments)},e)}function a(t,e){ye[t]||(i(e),ye[t]=!0)}function s(t,e){return function(n){return m(t.call(this,n),e)}}function u(t,e){return function(n){return this.localeData().ordinal(t.call(this,n),e)}}function c(){}function l(t,e){e!==!1&&C(t),d(this,t),this._d=new Date((+t._d))}function f(t){var e=T(t),n=e.year||0,r=e.quarter||0,i=e.month||0,o=e.week||0,a=e.day||0,s=e.hour||0,u=e.minute||0,c=e.second||0,l=e.millisecond||0;this._milliseconds=+l+1e3*c+6e4*u+36e5*s,this._days=+a+7*o,this._months=+i+3*r+12*n,this._data={},this._locale=vt.localeData(),this._bubble()}function h(t,e){for(var r in e)n(e,r)&&(t[r]=e[r]);return n(e,"toString")&&(t.toString=e.toString),n(e,"valueOf")&&(t.valueOf=e.valueOf),t}function d(t,e){var n,r,i;if("undefined"!=typeof e._isAMomentObject&&(t._isAMomentObject=e._isAMomentObject),"undefined"!=typeof e._i&&(t._i=e._i),"undefined"!=typeof e._f&&(t._f=e._f),"undefined"!=typeof e._l&&(t._l=e._l),"undefined"!=typeof e._strict&&(t._strict=e._strict),"undefined"!=typeof e._tzm&&(t._tzm=e._tzm),"undefined"!=typeof e._isUTC&&(t._isUTC=e._isUTC),"undefined"!=typeof e._offset&&(t._offset=e._offset),"undefined"!=typeof e._pf&&(t._pf=e._pf),"undefined"!=typeof e._locale&&(t._locale=e._locale),Ft.length>0)for(n in Ft)r=Ft[n],i=e[r],"undefined"!=typeof i&&(t[r]=i);return t}function p(t){return t<0?Math.ceil(t):Math.floor(t)}function m(t,e,n){for(var r=""+Math.abs(t),i=t>=0;r.length<e;)r="0"+r;return(i?n?"+":"":"-")+r}function y(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function _(t,e){var n;return e=z(e,t),t.isBefore(e)?n=y(t,e):(n=y(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n}function g(t,e){return function(n,r){var i,o;return null===r||isNaN(+r)||(a(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),o=n,n=r,r=o),n="string"==typeof n?+n:n,i=vt.duration(n,r),v(this,i,t),this}}function v(t,e,n,r){var i=e._milliseconds,o=e._days,a=e._months;r=null==r||r,i&&t._d.setTime(+t._d+i*n),o&&dt(t,"Date",ht(t,"Date")+o*n),a&&ft(t,ht(t,"Month")+a*n),r&&vt.updateOffset(t,o||a)}function w(t){return"[object Array]"===Object.prototype.toString.call(t)}function b(t){return"[object Date]"===Object.prototype.toString.call(t)||t instanceof Date}function D(t,e,n){var r,i=Math.min(t.length,e.length),o=Math.abs(t.length-e.length),a=0;for(r=0;r<i;r++)(n&&t[r]!==e[r]||!n&&S(t[r])!==S(e[r]))&&a++;return a+o}function M(t){if(t){var e=t.toLowerCase().replace(/(.)s$/,"$1");t=ce[t]||le[e]||e}return t}function T(t){var e,r,i={};for(r in t)n(t,r)&&(e=M(r),e&&(i[e]=t[r]));return i}function Y(e){var n,r;if(0===e.indexOf("week"))n=7,r="day";else{if(0!==e.indexOf("month"))return;n=12,r="month"}vt[e]=function(i,o){var a,s,u=vt._locale[e],c=[];if("number"==typeof i&&(o=i,i=t),s=function(t){var e=vt().utc().set(r,t);return u.call(vt._locale,e,i||"")},null!=o)return s(o);for(a=0;a<n;a++)c.push(s(a));return c}}function S(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=e>=0?Math.floor(e):Math.ceil(e)),n}function k(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function x(t,e,n){return st(vt([t,11,31+e-n]),e,n).week}function E(t){return O(t)?366:365}function O(t){return t%4===0&&t%100!==0||t%400===0}function C(t){var e;t._a&&t._pf.overflow===-2&&(e=t._a[kt]<0||t._a[kt]>11?kt:t._a[xt]<1||t._a[xt]>k(t._a[St],t._a[kt])?xt:t._a[Et]<0||t._a[Et]>23?Et:t._a[Ot]<0||t._a[Ot]>59?Ot:t._a[Ct]<0||t._a[Ct]>59?Ct:t._a[Pt]<0||t._a[Pt]>999?Pt:-1,t._pf._overflowDayOfYear&&(e<St||e>xt)&&(e=xt),t._pf.overflow=e)}function P(t){return null==t._isValid&&(t._isValid=!isNaN(t._d.getTime())&&t._pf.overflow<0&&!t._pf.empty&&!t._pf.invalidMonth&&!t._pf.nullInput&&!t._pf.invalidFormat&&!t._pf.userInvalidated,t._strict&&(t._isValid=t._isValid&&0===t._pf.charsLeftOver&&0===t._pf.unusedTokens.length)),t._isValid}function j(t){return t?t.toLowerCase().replace("_","-"):t}function F(t){for(var e,n,r,i,o=0;o<t.length;){for(i=j(t[o]).split("-"),e=i.length,n=j(t[o+1]),n=n?n.split("-"):null;e>0;){if(r=L(i.slice(0,e).join("-")))return r;if(n&&n.length>=e&&D(i,n,!0)>=e-1)break;e--}o++}return null}function L(t){var e=null;if(!jt[t]&&Lt)try{e=vt.locale(),require("./locale/"+t),vt.locale(e)}catch(n){}return jt[t]}function z(t,e){return e._isUTC?vt(t).zone(e._offset||0):vt(t).local()}function U(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function N(t){var e,n,r=t.match(Wt);for(e=0,n=r.length;e<n;e++)me[r[e]]?r[e]=me[r[e]]:r[e]=U(r[e]);return function(i){var o="";for(e=0;e<n;e++)o+=r[e]instanceof Function?r[e].call(i,t):r[e];return o}}function W(t,e){return t.isValid()?(e=G(e,t.localeData()),fe[e]||(fe[e]=N(e)),fe[e](t)):t.localeData().invalidDate()}function G(t,e){function n(t){return e.longDateFormat(t)||t}var r=5;for(Gt.lastIndex=0;r>=0&&Gt.test(t);)t=t.replace(Gt,n),Gt.lastIndex=0,r-=1;return t}function A(t,e){var n,r=e._strict;switch(t){case"Q":return Bt;case"DDDD":return Kt;case"YYYY":case"GGGG":case"gggg":return r?te:Ht;case"Y":case"G":case"g":return ne;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return r?ee:Zt;case"S":if(r)return Bt;case"SS":if(r)return Qt;case"SSS":if(r)return Kt;case"DDD":return It;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return Rt;case"a":case"A":return e._locale._meridiemParse;case"X":return Xt;case"Z":case"ZZ":return Vt;case"T":return qt;case"SSSS":return $t;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return r?Qt:At;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return At;case"Do":return Jt;default:return n=new RegExp(J(X(t.replace("\\","")),"i"))}}function I(t){t=t||"";var e=t.match(Vt)||[],n=e[e.length-1]||[],r=(n+"").match(se)||["-",0,0],i=+(60*r[1])+S(r[2]);return"+"===r[0]?-i:i}function H(t,e,n){var r,i=n._a;switch(t){case"Q":null!=e&&(i[kt]=3*(S(e)-1));break;case"M":case"MM":null!=e&&(i[kt]=S(e)-1);break;case"MMM":case"MMMM":r=n._locale.monthsParse(e),null!=r?i[kt]=r:n._pf.invalidMonth=e;break;case"D":case"DD":null!=e&&(i[xt]=S(e));break;case"Do":null!=e&&(i[xt]=S(parseInt(e,10)));break;case"DDD":case"DDDD":null!=e&&(n._dayOfYear=S(e));break;case"YY":i[St]=vt.parseTwoDigitYear(e);break;case"YYYY":case"YYYYY":case"YYYYYY":i[St]=S(e);break;case"a":case"A":n._isPm=n._locale.isPM(e);break;case"H":case"HH":case"h":case"hh":i[Et]=S(e);break;case"m":case"mm":i[Ot]=S(e);break;case"s":case"ss":i[Ct]=S(e);break;case"S":case"SS":case"SSS":case"SSSS":i[Pt]=S(1e3*("0."+e));break;case"X":n._d=new Date(1e3*parseFloat(e));break;case"Z":case"ZZ":n._useUTC=!0,n._tzm=I(e);break;case"dd":case"ddd":case"dddd":r=n._locale.weekdaysParse(e),null!=r?(n._w=n._w||{},n._w.d=r):n._pf.invalidWeekday=e;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":t=t.substr(0,1);case"gggg":case"GGGG":case"GGGGG":t=t.substr(0,2),e&&(n._w=n._w||{},n._w[t]=S(e));break;case"gg":case"GG":n._w=n._w||{},n._w[t]=vt.parseTwoDigitYear(e)}}function Z(t){var n,r,i,o,a,s,u;n=t._w,null!=n.GG||null!=n.W||null!=n.E?(a=1,s=4,r=e(n.GG,t._a[St],st(vt(),1,4).year),i=e(n.W,1),o=e(n.E,1)):(a=t._locale._week.dow,s=t._locale._week.doy,r=e(n.gg,t._a[St],st(vt(),a,s).year),i=e(n.w,1),null!=n.d?(o=n.d,o<a&&++i):o=null!=n.e?n.e+a:a),u=ut(r,i,o,s,a),t._a[St]=u.year,t._dayOfYear=u.dayOfYear}function $(t){var n,r,i,o,a=[];if(!t._d){for(i=V(t),t._w&&null==t._a[xt]&&null==t._a[kt]&&Z(t),t._dayOfYear&&(o=e(t._a[St],i[St]),t._dayOfYear>E(o)&&(t._pf._overflowDayOfYear=!0),r=rt(o,0,t._dayOfYear),t._a[kt]=r.getUTCMonth(),t._a[xt]=r.getUTCDate()),n=0;n<3&&null==t._a[n];++n)t._a[n]=a[n]=i[n];for(;n<7;n++)t._a[n]=a[n]=null==t._a[n]?2===n?1:0:t._a[n];t._d=(t._useUTC?rt:nt).apply(null,a),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()+t._tzm)}}function R(t){var e;t._d||(e=T(t._i),t._a=[e.year,e.month,e.day,e.hour,e.minute,e.second,e.millisecond],$(t))}function V(t){var e=new Date;return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}function q(t){if(t._f===vt.ISO_8601)return void Q(t);t._a=[],t._pf.empty=!0;var e,n,r,i,o,a=""+t._i,s=a.length,u=0;for(r=G(t._f,t._locale).match(Wt)||[],e=0;e<r.length;e++)i=r[e],n=(a.match(A(i,t))||[])[0],n&&(o=a.substr(0,a.indexOf(n)),o.length>0&&t._pf.unusedInput.push(o),a=a.slice(a.indexOf(n)+n.length),u+=n.length),me[i]?(n?t._pf.empty=!1:t._pf.unusedTokens.push(i),H(i,n,t)):t._strict&&!n&&t._pf.unusedTokens.push(i);t._pf.charsLeftOver=s-u,a.length>0&&t._pf.unusedInput.push(a),t._isPm&&t._a[Et]<12&&(t._a[Et]+=12),t._isPm===!1&&12===t._a[Et]&&(t._a[Et]=0),$(t),C(t)}function X(t){return t.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,r,i){return e||n||r||i})}function J(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function B(t){var e,n,i,o,a;if(0===t._f.length)return t._pf.invalidFormat=!0,void(t._d=new Date(NaN));for(o=0;o<t._f.length;o++)a=0,e=d({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._pf=r(),e._f=t._f[o],q(e),P(e)&&(a+=e._pf.charsLeftOver,a+=10*e._pf.unusedTokens.length,e._pf.score=a,(null==i||a<i)&&(i=a,n=e));h(t,n||e)}function Q(t){var e,n,r=t._i,i=re.exec(r);if(i){for(t._pf.iso=!0,e=0,n=oe.length;e<n;e++)if(oe[e][1].exec(r)){t._f=oe[e][0]+(i[6]||" ");break}for(e=0,n=ae.length;e<n;e++)if(ae[e][1].exec(r)){t._f+=ae[e][0];break}r.match(Vt)&&(t._f+="Z"),q(t)}else t._isValid=!1}function K(t){Q(t),t._isValid===!1&&(delete t._isValid,vt.createFromInputFallback(t))}function tt(t,e){var n,r=[];for(n=0;n<t.length;++n)r.push(e(t[n],n));return r}function et(e){var n,r=e._i;r===t?e._d=new Date:b(r)?e._d=new Date((+r)):null!==(n=zt.exec(r))?e._d=new Date((+n[1])):"string"==typeof r?K(e):w(r)?(e._a=tt(r.slice(0),function(t){return parseInt(t,10)}),$(e)):"object"==typeof r?R(e):"number"==typeof r?e._d=new Date(r):vt.createFromInputFallback(e)}function nt(t,e,n,r,i,o,a){var s=new Date(t,e,n,r,i,o,a);return t<1970&&s.setFullYear(t),s}function rt(t){var e=new Date(Date.UTC.apply(null,arguments));return t<1970&&e.setUTCFullYear(t),e}function it(t,e){if("string"==typeof t)if(isNaN(t)){if(t=e.weekdaysParse(t),"number"!=typeof t)return null}else t=parseInt(t,10);return t}function ot(t,e,n,r,i){return i.relativeTime(e||1,!!n,t,r)}function at(t,e,n){var r=vt.duration(t).abs(),i=Tt(r.as("s")),o=Tt(r.as("m")),a=Tt(r.as("h")),s=Tt(r.as("d")),u=Tt(r.as("M")),c=Tt(r.as("y")),l=i<he.s&&["s",i]||1===o&&["m"]||o<he.m&&["mm",o]||1===a&&["h"]||a<he.h&&["hh",a]||1===s&&["d"]||s<he.d&&["dd",s]||1===u&&["M"]||u<he.M&&["MM",u]||1===c&&["y"]||["yy",c];return l[2]=e,l[3]=+t>0,l[4]=n,ot.apply({},l)}function st(t,e,n){var r,i=n-e,o=n-t.day();return o>i&&(o-=7),o<i-7&&(o+=7),r=vt(t).add(o,"d"),{week:Math.ceil(r.dayOfYear()/7),year:r.year()}}function ut(t,e,n,r,i){var o,a,s=rt(t,0,1).getUTCDay();return s=0===s?7:s,n=null!=n?n:i,o=i-s+(s>r?7:0)-(s<i?7:0),a=7*(e-1)+(n-i)+o+1,{year:a>0?t:t-1,dayOfYear:a>0?a:E(t-1)+a}}function ct(e){var n=e._i,r=e._f;return e._locale=e._locale||vt.localeData(e._l),null===n||r===t&&""===n?vt.invalid({nullInput:!0}):("string"==typeof n&&(e._i=n=e._locale.preparse(n)),vt.isMoment(n)?new l(n,(!0)):(r?w(r)?B(e):q(e):et(e),new l(e)))}function lt(t,e){var n,r;if(1===e.length&&w(e[0])&&(e=e[0]),!e.length)return vt();for(n=e[0],r=1;r<e.length;++r)e[r][t](n)&&(n=e[r]);return n}function ft(t,e){var n;return"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(n=Math.min(t.date(),k(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t)}function ht(t,e){return t._d["get"+(t._isUTC?"UTC":"")+e]()}function dt(t,e,n){return"Month"===e?ft(t,n):t._d["set"+(t._isUTC?"UTC":"")+e](n)}function pt(t,e){return function(n){return null!=n?(dt(this,t,n),vt.updateOffset(this,e),this):ht(this,t)}}function mt(t){return 400*t/146097}function yt(t){return 146097*t/400}function _t(t){vt.duration.fn[t]=function(){return this._data[t]}}function gt(t){"undefined"==typeof ender&&(wt=Mt.moment,t?Mt.moment=o("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",vt):Mt.moment=vt)}for(var vt,wt,bt,Dt="2.8.3",Mt="undefined"!=typeof global?global:this,Tt=Math.round,Yt=Object.prototype.hasOwnProperty,St=0,kt=1,xt=2,Et=3,Ot=4,Ct=5,Pt=6,jt={},Ft=[],Lt="undefined"!=typeof module&&module.exports,zt=/^\/?Date\((\-?\d+)/i,Ut=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Nt=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,Wt=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,Gt=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,At=/\d\d?/,It=/\d{1,3}/,Ht=/\d{1,4}/,Zt=/[+\-]?\d{1,6}/,$t=/\d+/,Rt=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Vt=/Z|[\+\-]\d\d:?\d\d/gi,qt=/T/i,Xt=/[\+\-]?\d+(\.\d{1,3})?/,Jt=/\d{1,2}/,Bt=/\d/,Qt=/\d\d/,Kt=/\d{3}/,te=/\d{4}/,ee=/[+-]?\d{6}/,ne=/[+-]?\d+/,re=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ie="YYYY-MM-DDTHH:mm:ssZ",oe=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],ae=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],se=/([\+\-]|\d\d)/gi,ue=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),ce={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},le={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},fe={},he={s:45,m:45,h:22,d:26,M:11},de="DDD w W M D d".split(" "),pe="M D H h m s w W".split(" "),me={M:function(){return this.month()+1},MMM:function(t){return this.localeData().monthsShort(this,t)},MMMM:function(t){return this.localeData().months(this,t)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(t){return this.localeData().weekdaysMin(this,t)},ddd:function(t){return this.localeData().weekdaysShort(this,t)},dddd:function(t){return this.localeData().weekdays(this,t)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return m(this.year()%100,2)},YYYY:function(){return m(this.year(),4)},YYYYY:function(){return m(this.year(),5)},YYYYYY:function(){var t=this.year(),e=t>=0?"+":"-";return e+m(Math.abs(t),6)},gg:function(){return m(this.weekYear()%100,2)},gggg:function(){return m(this.weekYear(),4)},ggggg:function(){return m(this.weekYear(),5)},GG:function(){return m(this.isoWeekYear()%100,2)},GGGG:function(){return m(this.isoWeekYear(),4)},GGGGG:function(){return m(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return S(this.milliseconds()/100)},SS:function(){return m(S(this.milliseconds()/10),2)},SSS:function(){return m(this.milliseconds(),3)},SSSS:function(){return m(this.milliseconds(),3)},Z:function(){var t=-this.zone(),e="+";return t<0&&(t=-t,e="-"),e+m(S(t/60),2)+":"+m(S(t)%60,2)},ZZ:function(){var t=-this.zone(),e="+";return t<0&&(t=-t,e="-"),e+m(S(t/60),2)+m(S(t)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},X:function(){return this.unix()},Q:function(){return this.quarter()}},ye={},_e=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"];de.length;)bt=de.pop(),me[bt+"o"]=u(me[bt],bt);for(;pe.length;)bt=pe.pop(),me[bt+bt]=s(me[bt],2);me.DDDD=s(me.DDD,3),h(c.prototype,{set:function(t){var e,n;for(n in t)e=t[n],"function"==typeof e?this[n]=e:this["_"+n]=e},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(t){return this._months[t.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(t){return this._monthsShort[t.month()]},monthsParse:function(t){var e,n,r;for(this._monthsParse||(this._monthsParse=[]),e=0;e<12;e++)if(this._monthsParse[e]||(n=vt.utc([2e3,e]),r="^"+this.months(n,"")+"|^"+this.monthsShort(n,""),this._monthsParse[e]=new RegExp(r.replace(".",""),"i")),this._monthsParse[e].test(t))return e},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(t){return this._weekdays[t.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(t){return this._weekdaysShort[t.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(t){return this._weekdaysMin[t.day()]},weekdaysParse:function(t){var e,n,r;for(this._weekdaysParse||(this._weekdaysParse=[]),e=0;e<7;e++)if(this._weekdaysParse[e]||(n=vt([2e3,1]).day(e),r="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=new RegExp(r.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e},_longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(t){var e=this._longDateFormat[t];return!e&&this._longDateFormat[t.toUpperCase()]&&(e=this._longDateFormat[t.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t]=e),e},isPM:function(t){return"p"===(t+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(t,e){var n=this._calendar[t];return"function"==typeof n?n.apply(e):n},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(t,e,n,r){var i=this._relativeTime[n];return"function"==typeof i?i(t,e,n,r):i.replace(/%d/i,t)},pastFuture:function(t,e){var n=this._relativeTime[t>0?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)},ordinal:function(t){return this._ordinal.replace("%d",t)},_ordinal:"%d",preparse:function(t){return t},postformat:function(t){return t},week:function(t){return st(t,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),vt=function(e,n,i,o){var a;return"boolean"==typeof i&&(o=i,i=t),a={},a._isAMomentObject=!0,a._i=e,a._f=n,a._l=i,a._strict=o,a._isUTC=!1,a._pf=r(),ct(a)},vt.suppressDeprecationWarnings=!1,vt.createFromInputFallback=o("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i)}),vt.min=function(){var t=[].slice.call(arguments,0);return lt("isBefore",t)},vt.max=function(){var t=[].slice.call(arguments,0);return lt("isAfter",t)},vt.utc=function(e,n,i,o){var a;return"boolean"==typeof i&&(o=i,i=t),a={},a._isAMomentObject=!0,a._useUTC=!0,a._isUTC=!0,a._l=i,a._i=e,a._f=n,a._strict=o,a._pf=r(),ct(a).utc()},vt.unix=function(t){return vt(1e3*t)},vt.duration=function(t,e){var r,i,o,a,s=t,u=null;return vt.isDuration(t)?s={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(s={},e?s[e]=t:s.milliseconds=t):(u=Ut.exec(t))?(r="-"===u[1]?-1:1,s={y:0,d:S(u[xt])*r,h:S(u[Et])*r,m:S(u[Ot])*r,s:S(u[Ct])*r,ms:S(u[Pt])*r}):(u=Nt.exec(t))?(r="-"===u[1]?-1:1,o=function(t){var e=t&&parseFloat(t.replace(",","."));return(isNaN(e)?0:e)*r},s={y:o(u[2]),M:o(u[3]),d:o(u[4]),h:o(u[5]),m:o(u[6]),s:o(u[7]),w:o(u[8])}):"object"==typeof s&&("from"in s||"to"in s)&&(a=_(vt(s.from),vt(s.to)),s={},s.ms=a.milliseconds,s.M=a.months),i=new f(s),vt.isDuration(t)&&n(t,"_locale")&&(i._locale=t._locale),i},vt.version=Dt,vt.defaultFormat=ie,vt.ISO_8601=function(){},vt.momentProperties=Ft,vt.updateOffset=function(){},vt.relativeTimeThreshold=function(e,n){return he[e]!==t&&(n===t?he[e]:(he[e]=n,!0))},vt.lang=o("moment.lang is deprecated. Use moment.locale instead.",function(t,e){return vt.locale(t,e)}),vt.locale=function(t,e){var n;return t&&(n="undefined"!=typeof e?vt.defineLocale(t,e):vt.localeData(t),n&&(vt.duration._locale=vt._locale=n)),vt._locale._abbr},vt.defineLocale=function(t,e){return null!==e?(e.abbr=t,jt[t]||(jt[t]=new c),jt[t].set(e),vt.locale(t),jt[t]):(delete jt[t],null)},vt.langData=o("moment.langData is deprecated. Use moment.localeData instead.",function(t){return vt.localeData(t)}),vt.localeData=function(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return vt._locale;if(!w(t)){if(e=L(t))return e;t=[t]}return F(t)},vt.isMoment=function(t){return t instanceof l||null!=t&&n(t,"_isAMomentObject")},vt.isDuration=function(t){return t instanceof f};for(bt=_e.length-1;bt>=0;--bt)Y(_e[bt]);vt.normalizeUnits=function(t){return M(t)},vt.invalid=function(t){var e=vt.utc(NaN);return null!=t?h(e._pf,t):e._pf.userInvalidated=!0,e},vt.parseZone=function(){return vt.apply(null,arguments).parseZone()},vt.parseTwoDigitYear=function(t){return S(t)+(S(t)>68?1900:2e3)},h(vt.fn=l.prototype,{clone:function(){return vt(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date((+this)):this._d},toISOString:function(){var t=vt(this).utc();return 0<t.year()&&t.year()<=9999?W(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):W(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var t=this;return[t.year(),t.month(),t.date(),t.hours(),t.minutes(),t.seconds(),t.milliseconds()]},isValid:function(){return P(this)},isDSTShifted:function(){return!!this._a&&(this.isValid()&&D(this._a,(this._isUTC?vt.utc(this._a):vt(this._a)).toArray())>0)},parsingFlags:function(){return h({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(t){return this.zone(0,t)},local:function(t){return this._isUTC&&(this.zone(0,t),this._isUTC=!1,t&&this.add(this._dateTzOffset(),"m")),this},format:function(t){var e=W(this,t||vt.defaultFormat);return this.localeData().postformat(e)},add:g(1,"add"),subtract:g(-1,"subtract"),diff:function(t,e,n){var r,i,o,a=z(t,this),s=6e4*(this.zone()-a.zone());return e=M(e),"year"===e||"month"===e?(r=432e5*(this.daysInMonth()+a.daysInMonth()),i=12*(this.year()-a.year())+(this.month()-a.month()),o=this-vt(this).startOf("month")-(a-vt(a).startOf("month")),o-=6e4*(this.zone()-vt(this).startOf("month").zone()-(a.zone()-vt(a).startOf("month").zone())),i+=o/r,"year"===e&&(i/=12)):(r=this-a,i="second"===e?r/1e3:"minute"===e?r/6e4:"hour"===e?r/36e5:"day"===e?(r-s)/864e5:"week"===e?(r-s)/6048e5:r),n?i:p(i)},from:function(t,e){return vt.duration({to:this,from:t}).locale(this.locale()).humanize(!e)},fromNow:function(t){return this.from(vt(),t)},calendar:function(t){var e=t||vt(),n=z(e,this).startOf("day"),r=this.diff(n,"days",!0),i=r<-6?"sameElse":r<-1?"lastWeek":r<0?"lastDay":r<1?"sameDay":r<2?"nextDay":r<7?"nextWeek":"sameElse";return this.format(this.localeData().calendar(i,this))},isLeapYear:function(){return O(this.year())},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=it(t,this.localeData()),this.add(t-e,"d")):e},month:pt("Month",!0),startOf:function(t){switch(t=M(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t?this.weekday(0):"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(t){return t=M(t),this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")},isAfter:function(t,e){return e=M("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=vt.isMoment(t)?t:vt(t),+this>+t):+this.clone().startOf(e)>+vt(t).startOf(e)},isBefore:function(t,e){return e=M("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=vt.isMoment(t)?t:vt(t),+this<+t):+this.clone().startOf(e)<+vt(t).startOf(e)},isSame:function(t,e){return e=M(e||"millisecond"),"millisecond"===e?(t=vt.isMoment(t)?t:vt(t),+this===+t):+this.clone().startOf(e)===+z(t,this).startOf(e)},min:o("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(t){return t=vt.apply(null,arguments),t<this?this:t}),max:o("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(t){return t=vt.apply(null,arguments),t>this?this:t}),zone:function(t,e){var n,r=this._offset||0;return null==t?this._isUTC?r:this._dateTzOffset():("string"==typeof t&&(t=I(t)),Math.abs(t)<16&&(t=60*t),!this._isUTC&&e&&(n=this._dateTzOffset()),this._offset=t,this._isUTC=!0,null!=n&&this.subtract(n,"m"),r!==t&&(!e||this._changeInProgress?v(this,vt.duration(r-t,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,vt.updateOffset(this,!0),this._changeInProgress=null)),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.zone(this._tzm):"string"==typeof this._i&&this.zone(this._i),this},hasAlignedHourOffset:function(t){return t=t?vt(t).zone():0,(this.zone()-t)%60===0},daysInMonth:function(){return k(this.year(),this.month())},dayOfYear:function(t){var e=Tt((vt(this).startOf("day")-vt(this).startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},quarter:function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},weekYear:function(t){var e=st(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==t?e:this.add(t-e,"y")},isoWeekYear:function(t){var e=st(this,1,4).year;return null==t?e:this.add(t-e,"y")},week:function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},isoWeek:function(t){var e=st(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},weekday:function(t){var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},isoWeekday:function(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)},isoWeeksInYear:function(){return x(this.year(),1,4)},weeksInYear:function(){var t=this.localeData()._week;return x(this.year(),t.dow,t.doy)},get:function(t){return t=M(t),this[t]()},set:function(t,e){return t=M(t),"function"==typeof this[t]&&this[t](e),this},locale:function(e){var n;return e===t?this._locale._abbr:(n=vt.localeData(e),null!=n&&(this._locale=n),this)},lang:o("moment().lang() is deprecated. Use moment().localeData() instead.",function(e){return e===t?this.localeData():this.locale(e)}),localeData:function(){return this._locale},_dateTzOffset:function(){return 15*Math.round(this._d.getTimezoneOffset()/15)}}),vt.fn.millisecond=vt.fn.milliseconds=pt("Milliseconds",!1),vt.fn.second=vt.fn.seconds=pt("Seconds",!1),vt.fn.minute=vt.fn.minutes=pt("Minutes",!1),vt.fn.hour=vt.fn.hours=pt("Hours",!0),vt.fn.date=pt("Date",!0),vt.fn.dates=o("dates accessor is deprecated. Use date instead.",pt("Date",!0)),vt.fn.year=pt("FullYear",!0),vt.fn.years=o("years accessor is deprecated. Use year instead.",pt("FullYear",!0)),vt.fn.days=vt.fn.day,vt.fn.months=vt.fn.month,vt.fn.weeks=vt.fn.week,vt.fn.isoWeeks=vt.fn.isoWeek,vt.fn.quarters=vt.fn.quarter,vt.fn.toJSON=vt.fn.toISOString,h(vt.duration.fn=f.prototype,{_bubble:function(){var t,e,n,r=this._milliseconds,i=this._days,o=this._months,a=this._data,s=0;a.milliseconds=r%1e3,t=p(r/1e3),a.seconds=t%60,e=p(t/60),a.minutes=e%60,n=p(e/60),a.hours=n%24,i+=p(n/24),s=p(mt(i)),i-=p(yt(s)),o+=p(i/30),i%=30,s+=p(o/12),o%=12,a.days=i,a.months=o,a.years=s},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return p(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*S(this._months/12)},humanize:function(t){var e=at(this,!t,this.localeData());return t&&(e=this.localeData().pastFuture(+this,e)),this.localeData().postformat(e)},add:function(t,e){var n=vt.duration(t,e);return this._milliseconds+=n._milliseconds,this._days+=n._days,this._months+=n._months,this._bubble(),this},subtract:function(t,e){var n=vt.duration(t,e);return this._milliseconds-=n._milliseconds,this._days-=n._days,this._months-=n._months,this._bubble(),this},get:function(t){return t=M(t),this[t.toLowerCase()+"s"]()},as:function(t){var e,n;if(t=M(t),"month"===t||"year"===t)return e=this._days+this._milliseconds/864e5,n=this._months+12*mt(e),"month"===t?n:n/12;switch(e=this._days+yt(this._months/12),t){case"week":return e/7+this._milliseconds/6048e5;case"day":return e+this._milliseconds/864e5;case"hour":return 24*e+this._milliseconds/36e5;case"minute":return 24*e*60+this._milliseconds/6e4;case"second":return 24*e*60*60+this._milliseconds/1e3;case"millisecond":return Math.floor(24*e*60*60*1e3)+this._milliseconds;default:throw new Error("Unknown unit "+t)}},lang:vt.fn.lang,locale:vt.fn.locale,toIsoString:o("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var t=Math.abs(this.years()),e=Math.abs(this.months()),n=Math.abs(this.days()),r=Math.abs(this.hours()),i=Math.abs(this.minutes()),o=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(t?t+"Y":"")+(e?e+"M":"")+(n?n+"D":"")+(r||i||o?"T":"")+(r?r+"H":"")+(i?i+"M":"")+(o?o+"S":""):"P0D"},localeData:function(){return this._locale}}),vt.duration.fn.toString=vt.duration.fn.toISOString;for(bt in ue)n(ue,bt)&&_t(bt.toLowerCase());vt.duration.fn.asMilliseconds=function(){return this.as("ms")},vt.duration.fn.asSeconds=function(){return this.as("s")},vt.duration.fn.asMinutes=function(){return this.as("m")},vt.duration.fn.asHours=function(){return this.as("h")},vt.duration.fn.asDays=function(){return this.as("d")},vt.duration.fn.asWeeks=function(){return this.as("weeks")},vt.duration.fn.asMonths=function(){return this.as("M")},vt.duration.fn.asYears=function(){return this.as("y")},vt.locale("en",{ordinal:function(t){
    var e=t%10,n=1===S(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),Lt?module.exports=vt:"function"==typeof define&&define.amd?(define("moment",function(t,e,n){return n.config&&n.config()&&n.config().noGlobal===!0&&(Mt.moment=wt),vt}),gt(!0)):gt()}.call(this);
//# sourceMappingURL=data:application/json;base64,