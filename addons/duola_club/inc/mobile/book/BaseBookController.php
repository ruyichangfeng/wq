<?php

/**
 * Created by PhpStorm.
 * User: liu
 * Date: 2017/2/14
 * Time: 下午5:55
 */
include_once 'BookController.php';
class BaseBookController extends BookController
{
    private $mcInfo;
    const  EARTH_RADIUS = '6378.137';
    public function __construct($schoolid, $openid, $weid)
    {
        parent::__construct($schoolid, $openid, $weid);
        $this->mcInfo = $mcInfo = pdo_fetch("SELECT * FROM " . tablename ( 'mc_members' ) . " where uniacid = :uniacid AND uid=:uid ", array(':uid' => $this->user['uid'], ':uniacid' => $this->weid));
    }

    public function formatData($data)
    {
        // TODO: Implement formatData() method.
    }

    public function addMoney(){
        $data = array(
            'template' => 'book/addMoney'
        );
        return $this->commonReturn($data);
    }
    public function editBook(){
        global $_GPC,$_W;
        $book = pdo_fetch("SELECT * FROM " . tablename($this->duolaSite->table_book) . " WHERE  :id = id ", array(':id' => $_GPC['bookid']));
        if(!empty($book)){
            load()->classs('weixin.account');
            $accObj= WeixinAccount::create($_W['account']['acid']);
            $accObj->clearAccessToken();
            $access_token = $accObj->fetch_token();
            $data = array(
                'template' => 'book/addbook1',
                'category' => $this->getDictionary(),
                'book'     => $book,
                'token'    => $access_token
            );
            return $this->commonReturn($data);
        }else{
            message('参数错误!');
        }
    }
    public function bookPay(){
        $margin = pdo_fetch("SELECT * FROM " . tablename($this->duolaSite->table_bookmargin). " where type = 'book_cz'");
        if($margin['amount'] > 0){
            $rate = sprintf('%0.2f',$margin['couponAmount']/$margin['amount']);
        }else{
            $rate = 3;
        }
        $data = array(
            'template'  => 'book/bookcharge',
            'rate'      => $rate,
            'margin'    => $margin,
            'payopenid' => $this->openid
        );
        return $this->commonReturn($data);
    }
    public function commonReturn($data)
    {
        $balance = $this->getBalance();
        $return = array(
            'userAccount'    => $balance['userAccount'],
            'balance'        => $balance['balance'],
            'schoolid'       => $this->schoolid,
            'weid'           => $this->weid,
            'openid'         => $this->openid,
            'school'         => $this->school,
            'user'           => $this->user,
            'userInfo'       => $this->userInfo,
            'data'           => $data
        );
        return $return; // TODO: Change the autogenerated stub
    }

    public function getDictionary(){
        $category = pdo_fetchall("SELECT * FROM " . tablename($this->duolaSite->table_classify) . " WHERE weid =  '{$this->weid}' AND schoolid ={$this->schoolid} ORDER BY sid ASC, ssort DESC", array(':weid' => $this->weid, ':schoolid' => $this->schoolid), 'sid');
        $book_lb = $book_age = $book_distance =array();
        foreach($category as $key => $value){
            switch($value['type']){
                case 'book_lb':
                    $book_lb[$value['sid']] = $value;
                    break;
                case 'book_age':
                    $book_age[$value['sid']] = $value;
                    break;
                case 'book_distance':
                    $book_distance[$value['sid']] = $value;
                    break;
                default:
                    break;
            }
        }
        $book_distance = pdo_fetchall("SELECT * FROM " . tablename($this->duolaSite->table_bookmargin) . " WHERE type='book_distance' ORDER BY amount ASC",array(),'id');
        return array('book_lb' => $book_lb,'book_age' => $book_age,'book_distance' => $book_distance);
    }

    public function updateBook(){
        global $_GPC,$_W;
        if (! $_GPC ['schoolid'] || ! $_GPC ['weid'] || ! $_GPC ['openid'] || !$_GPC ['id']) {
            $this->formatJsonData(array (
                'result' => false,
                'msg' => '非法请求！'
            ));
        }
        load()->func('communication');
        load()->classs('weixin.account');
        load()->func('file');
        $accObj= WeixinAccount::create($_W['account']['acid']);
        $access_token = $accObj->fetch_token();
        $token2 =  $access_token;
        //获取图片
        $coverImgUrl = $_GPC ['coverImg'];
        if(!empty($coverImgUrl)) {
            $url = 'http://file.api.weixin.qq.com/cgi-bin/media/get?access_token='.$token2.'&media_id='.$coverImgUrl;
            $pic_data = ihttp_request($url);
            $path = "images/";
            $coverImg = $path.random(30) .".jpg";
            file_write($coverImg,$pic_data['content']);
            if (!empty($_W['setting']['remote']['type'])) { //
                $remotestatus = file_remote_upload($coverImg); //
                if (is_error($remotestatus)) {
                    message('远程附件上传失败，请检查配置并重新上传');
                }
            }
        }

        $backImgUrl = $_GPC ['backImg'];
        if(!empty($backImgUrl)) {
            $url = 'http://file.api.weixin.qq.com/cgi-bin/media/get?access_token='.$token2.'&media_id='.$backImgUrl;
            $pic_data = ihttp_request($url);
            $path = "images/";
            $backImg = $path.random(30) .".jpg";
            file_write($backImg,$pic_data['content']);
            if (!empty($_W['setting']['remote']['type'])) { //
                $remotestatus = file_remote_upload($backImg); //
                if (is_error($remotestatus)) {
                    message('远程附件上传失败，请检查配置并重新上传');
                }
            }
        }
        //更新book
        $updateData = array(
            'cat_id' => $_GPC['cat_id'],
            'age_id' => $_GPC['age_id']
        );
        pdo_update($this->duolaSite->table_book,$updateData,array('id' => $_GPC['id']));
        $updateBookData = array(
            'coverImg' => $coverImg,
            'backImg' => $backImg,
        );
        pdo_update($this->duolaSite->table_mybook,$updateBookData,array('weid' => $this->weid,'schoolid' => $this->schoolid,'openid' => $this->openid,'bookid' => $_GPC['id']));
        $this->formatJsonData(array(
            'result' => true,
            'msg'    => '编辑成功!'
        ));
    }
    public function scanCode(){
        //待上架数量
        $unsalebooks = pdo_fetch("SELECT count(1) as unsaleCount FROM " .tablename($this->duolaSite->table_mybook)." where :schoolid = schoolid And :weid = weid  And :is_delete = is_delete And :status = status  And :openid = openid ", array(':weid' => $this->weid, ':schoolid' => $this->schoolid,':is_delete' => 1,':status' => 1,':openid' => $this->openid), 'id');
        //今日入库
        $todayUnSalebooks = pdo_fetch("SELECT count(1) as unsaleCount FROM " .tablename($this->duolaSite->table_mybook)." where :schoolid = schoolid And :weid = weid  And :is_delete = is_delete And :status = status  And :openid = openid And date_format(createDate,'%Y-%m-%d') = :today ", array(':weid' => $this->weid, ':schoolid' => $this->schoolid,':is_delete' => 1,':status' => 1,':openid' => $this->openid,':today' => date('Y-m-d')), 'id');
        $data = array(
            'template' => 'book/scancode',
            'unSaleCount' => $unsalebooks['unsaleCount'],
            'todayUnsale' => $todayUnSalebooks['unsaleCount'],
            'isRegisterUser' => !empty($this->user) ? true : false
        );
        return $this->commonReturn($data);
    }

    //下架闲书
    public function displayUnSaleBook(){
        global  $_GPC,$_W;
        $status = $_GPC['status'] ? $_GPC['status'] : 1;
        $unsalebooks = pdo_fetchall("SELECT mybook.openid,mybook.id as mybookid,book.* FROM " . tablename($this->duolaSite->table_mybook) . " as mybook left Join ".tablename($this->duolaSite->table_book)." as book on  mybook.bookid = book.id where :schoolid = mybook.schoolid And :weid = mybook.weid  And :is_delete = mybook.is_delete And :status = mybook.status  And :openid = mybook.openid  order by mybook.createDate desc", array(':weid' => $this->weid, ':schoolid' => $this->schoolid,':is_delete' => 1,':status' => $status,':openid' => $this->openid), 'id');
        //查询种类分布
        $bookCats = array();
        $cats     = array();
        $dict     = $this->getDictionary();
        foreach ($unsalebooks as $bk){
            if($bookCats[$bk['age_id']]['count'] > 0){
                $bookCats[$bk['age_id']]['count'] += 1;
            }else{
                $bookCats[$bk['age_id']]['count'] = 1;
            }
            if(empty($cats[$bk['age_id']])){
                $cats[$bk['age_id']] = array('age_id' => $bk['age_id'],'age_name' => $dict['book_age'][$bk['age_id']]['sname']);
            }
        }
        $content = '';
        foreach ($cats as $bc){
            if(!empty($bookCats[$bc['age_id']])){
                $content .= $bc['age_name'].$bookCats[$bc['age_id']]['count'].'本'.'|';
            }
        }
        $links = $_W['siteroot'] .'app/'.$this->duolaSite->createMobileUrl('bookCenter',array('schoolid' => $this->schoolid,'ownerOpenId' => $this->openid));
        $content = trim($content,'|');
        $data = array(
            'template' => 'book/myunsalebook',
            'unSaleBooks' => $unsalebooks,
            'content' => $content,
            'imgUrl'  => $this->bookLogo,
            'links'   => $links,
            'mcInfo'  => $this->mcInfo
        );
        return $this->commonReturn($data);

    }

    //上架闲书
    public function displayOnSaleBook(){
        global  $_GPC,$_W;
        $status = $_GPC['status'] ? $_GPC['status'] : 2;
        $onsalebooks = pdo_fetchall("SELECT mybook.openid,mybook.id as mybookid,book.* FROM " . tablename($this->duolaSite->table_mybook) . " as mybook left Join ".tablename($this->duolaSite->table_book)." as book on  mybook.bookid = book.id where :schoolid = mybook.schoolid And :weid = mybook.weid  And :is_delete = mybook.is_delete And :status = mybook.status  And :openid = mybook.openid  order by mybook.createDate desc", array(':weid' => $this->weid, ':schoolid' => $this->schoolid,':is_delete' => 1,':status' => $status,':openid' => $this->openid), 'id');
        //查询种类分布
        $bookCats = array();
        $cats     = array();
        $dict     = $this->getDictionary();
        foreach ($onsalebooks as $bk){
            if($bookCats[$bk['age_id']]['count'] > 0){
                $bookCats[$bk['age_id']]['count'] += 1;
            }else{
                $bookCats[$bk['age_id']]['count'] = 1;
            }
            if(empty($cats[$bk['age_id']])){
                $cats[$bk['age_id']] = array('age_id' => $bk['age_id'],'age_name' => $dict['book_age'][$bk['age_id']]['sname']);
            }
        }
        $content = '';
        foreach ($cats as $bc){
            if(!empty($bookCats[$bc['age_id']])){
                $content .= $bc['age_name'].$bookCats[$bc['age_id']]['count'].'本'.'|';
            }
        }
        $links = $_W['siteroot'] .'app/'.$this->duolaSite->createMobileUrl('bookCenter',array('schoolid' => $this->schoolid,'ownerOpenId' => $this->openid));
        $content = trim($content,'|');
        $data = array(
            'template' => 'book/myonsalebook',
            'onSaleBooks' => $onsalebooks,
            'content' => $content,
            'imgUrl'  => $this->bookLogo,
            'links'   => $links,
            'mcInfo'  => $this->mcInfo
        );
        return $this->commonReturn($data);
    }

    public function unsale()
    {
        $this->checkSubmitData();
        global $_GPC;
        $bookData = pdo_fetch("SELECT mybook.openid,mybook.id as mybookid,book.* FROM " . tablename($this->duolaSite->table_mybook) . " as mybook left Join ".tablename($this->duolaSite->table_book)." as book on  mybook.bookid = book.id where :id = mybook.id", array(':id' => $_GPC['id']));
        if(empty($bookData)){
            $this->formatJsonData(array (
                'result' => false,
                'msg' => '下架失败！',
                'errorCode' => 1
            ));
        }
        $balance = $this->getBalance();
        $userAccount = $balance['userAccount'];
        $margin = pdo_fetch("SELECT amount FROM " . tablename($this->duolaSite->table_bookmargin). " where type = 'book_discount'");
        $onSaleAmount = $userAccount['onSaleAmount'] - $bookData['price'];
        $marginalValue = $userAccount['balance']-floatval(sprintf('%0.2f',$bookData['price']*($margin['amount']/100)));
        if($marginalValue < 0){
            $this->formatJsonData(array (
                'result' => false,
                'msg' => '余额不足,下架失败！',
                'errorCode' => 2,
                'amount' => abs($marginalValue)
            ));
        }

        //更新账户余额
        $amountData = array(
            'onSaleAmount' => $onSaleAmount,
        );
        if(!empty($margin) && $onSaleAmount >= 0){
            $discountAmount = sprintf('%0.2f',$bookData['price']*($margin['amount']/100));
            $amountData['balance'] = floatval($userAccount['balance'])-floatval($discountAmount);
            $amountData['couponAmount'] = floatval($userAccount['couponAmount']) - floatval($discountAmount);
            $logData = array(
                'orderId' => 10000,
                'amount'  => $discountAmount,
                'type'    => 'xj',
                'openid'  => $this->openid,
                'remark'  => '下架'.$bookData['price'].'减额'.$discountAmount.''
            );
            pdo_insert($this->duolaSite->table_booklog,$logData);
        }
        pdo_update($this->duolaSite->table_mybook,array('status' => 1),array('id' => $_GPC['id']));
        pdo_update($this->duolaSite->table_bookaccount,$amountData,array('openid' => $userAccount['openid']));
        $this->formatJsonData(array(
            'result' => true,
            'msg'    => '下架成功!'
        ));
    }
    public function checkSubmitData()
    {
        global $_GPC;
        if (! $_GPC ['schoolid'] || ! $_GPC ['weid']) {
            $this->formatJsonData(array (
                'result' => false,
                'msg' => '非法请求！',
                'errorCode' => 0
            ) );
        }
    }

    public function delete(){
        global $_GPC;
        $this->checkSubmitData();
        pdo_update($this->duolaSite->table_mybook,array('is_delete' => 2),array('id' => $_GPC['id']));
        $this->formatJsonData(array(
            'result' => true,
            'msg'    => '删除成功!'
        ));
    }

    public function onsale(){
        global $_GPC;
        $this->checkSubmitData();
        $bookData = pdo_fetch("SELECT mybook.openid,mybook.id as mybookid,book.* FROM " . tablename($this->duolaSite->table_mybook) . " as mybook left Join ".tablename($this->duolaSite->table_book)." as book on  mybook.bookid = book.id where :id = mybook.id", array(':id' => $_GPC['id']));
        if(empty($bookData)){
            $this->formatJsonData(array (
                'result' => false,
                'msg' => '上架失败！'
            ));
        }
        pdo_update($this->duolaSite->table_mybook,array('status' => 2),array('id' => $_GPC['id']));
        //更新我的账户
        $balance = $this->getBalance();
        $userAccount = $balance['userAccount'];
        $newOnSaleAmount = $userAccount['onSaleAmount'] + $bookData['price'];
        $amountData = array(
            'onSaleAmount' => $newOnSaleAmount
        );
        //查询保证金数据
        $margin = pdo_fetch("SELECT * FROM " . tablename($this->duolaSite->table_bookmargin) . " where type = 'book_discount'");
        if(!empty($margin)){
            $discountAmount = sprintf('%0.2f',$bookData['price']*($margin['amount']/100));
            $amountData['balance'] = floatval($discountAmount)+floatval($userAccount['balance']);
            $amountData['couponAmount'] = floatval($discountAmount) +floatval($userAccount['couponAmount']);
//            //发送模板消息
//            $msgBody = array(
//                'schoolid'   => $this->schoolid,
//                'weid'       => $this->weid,
//                'orderId'    => '10000',
//                'orderType'  => 'mz',
//                'amountData' => array(
//                    'preAmount'   => $balance['balance'],
//                    'afterAmount' => $balance['balance']+$margin['couponAmount'],
//                    'amount'      => $margin['couponAmount'],
//                    'triggerValue'=> $margin['amount']
//                )
//            );
//            $this->duolaSite->sendMobileXsedbdtz($msgBody);

            $logData = array(
                'orderId' => 10000,
                'amount'  => $discountAmount,
                'type'    => 'mz',
                'openid'  => $this->openid,
                'remark'  => '上架'.$bookData['price'].'增额'.$discountAmount.''
            );
            pdo_insert($this->duolaSite->table_booklog,$logData);
        }
        pdo_update($this->duolaSite->table_bookaccount,$amountData,array('openid' => $userAccount['openid']));
        $this->formatJsonData(array(
            'result' => true,
            'msg'    => '上架成功!'
        ));
    }
    public function showBookMap(){
        global $_GPC,$_W;
        $book_distance = pdo_fetchall("SELECT * FROM " . tablename($this->duolaSite->table_bookmargin) . " WHERE type='book_distance' ORDER BY amount ASC",array(),'id');
        $lat = $this->userInfo['lat'];
        $lng = $this->userInfo['lng'];
        $condition = '';
        if(!empty($_GPC['typeName'])){
            switch($_GPC['typeName']){
                case 'age':
                    $age_id = intval($_GPC['typeId']);
                    $condition .= " AND book.age_id = '{$age_id}'";
                    if($_COOKIE['age_id'] == null){
                        setcookie('age_id',$age_id,time()+30);
                    }
                    break;
                case 'lb':
                    $cat_id = intval($_GPC['typeId']);
                    $condition .= " AND book.cat_id  = '{$cat_id}'";
                    if($_COOKIE['lb_id'] == null){
                        setcookie('lb_id',$cat_id,time()+30);
                    }
                    break;
                case 'keyword':
                    $name = trim($_GPC['typeId']);
                    if($_COOKIE['keyword'] == null){
                        setcookie('keyword',$name,time()+30);
                    }
                    $condition .= " AND (book.title LIKE '%{$name}%' Or book.author LIKE '%{$name}%') ";
                    break;
                case 'distance':
                    if($_COOKIE['distance'] == null){
                        setcookie('distance',$_GPC['typeId'],time()+30);
                    }
                    break;
                default:
                    break;
            }
        }
        if($_COOKIE['age_id'] != null && $_GPC['typeName'] != 'age_id'){
            $condition .= " AND book.age_id = '{$_COOKIE['age_id']}'";
        }
        if($_COOKIE['keyword'] != null && $_GPC['typeName'] != 'keyword'){
            $condition .= " AND (book.title LIKE '%{$_COOKIE['keyword']}%' Or book.author LIKE '%{$_COOKIE['keyword']}%') ";
        }
        if($_COOKIE['lb_id'] != null && $_GPC['typeName'] != 'lb_id'){
            $condition .= " AND book.cat_id  = '{$_COOKIE['lb_id']}'";
        }

        //查询book
        $result = pdo_fetchall("SELECT mybook.openid,book.* FROM " . tablename($this->duolaSite->table_mybook) . " as mybook left Join ".tablename($this->duolaSite->table_book)." as book on  mybook.bookid = book.id where :schoolid = mybook.schoolid And :weid = mybook.weid  And :is_delete = mybook.is_delete And :status = mybook.status And mybook.openid <> '{$this->openid}' $condition", array(':weid' => $this->weid, ':schoolid' => $this->schoolid,':is_delete' => 1,':status' => 2));
        $books = array();
        $cats  = array();
        $bookCats = array();
        $userCount = array();
        $dict = $this->getDictionary();
        if($result){
            foreach($result as $book){
                if(empty($books[$book['openid']])){
                    $userInfo = $this->getUserInfo($book['openid']);
                    $data['userImg']  = $userInfo['mcInfo']['avatar'];
                    $data['nickname'] = $userInfo['mcInfo']['nickname'];
                    $data['is_institution'] = false;
                    if(!empty($userInfo['book_user'])){
                        $data['is_institution'] = $userInfo['book_user']['userAttribute'] == 1 ? false : true;
                    }
                    $data['openid']   = $book['openid'];
                    //距离当前距离
                    $kmDistance = $this->duolaSite->getDistance($lat,$lng,$userInfo['userInfo']['lat'],$userInfo['userInfo']['lng']);
                    $data['distance'] = $this->duolaSite->mToKm($kmDistance);
                    if((!empty($_GPC['typeName']) && $_GPC['typeName'] == 'distance') || !empty($_COOKIE['distance'])){
                        $distance = $book_distance[$_GPC['typeId']] ? $book_distance[$_GPC['typeId']] : $book_distance[$_COOKIE['distance']];
                        $dis = intval($data['distance']);
                        if($distance['classify'] == 1){
                            if($dis > $distance['amount']){
                                continue;
                            }
                        }
                        if($distance['classify'] == 2){
                            if($dis != $distance['amount']){
                                continue;
                            }
                        }
                        if($distance['classify'] == 3){
                            if($dis < $distance['amount']){
                                continue;
                            }
                        }
                        if($distance['classify'] == 4){
                            if($dis < $distance['amount'] || $dis > $distance['maxAmount']){
                                continue;
                            }
                        }
                    }
                    $books[$book['openid']] = $data;
                }
                if($bookCats[$book['openid']][$book['age_id']]['count'] > 0){
                    $bookCats[$book['openid']][$book['age_id']]['count'] += 1;
                }else{
                    $bookCats[$book['openid']][$book['age_id']]['count'] = 1;
                }
                if(empty($cats[$book['openid']][$book['age_id']])){
                    $cats[$book['openid']][$book['age_id']] = array('age_id' => $book['age_id'],'age_name' => $dict['book_age'][$book['age_id']]['sname']);
                }
                if(empty($userCount[$book['openid']][$book['id']])){
                    $userCount[$book['openid']][$book['id']] = 1;
                }
                if(!empty($userCount[$book['openid']])){
                    $books[$book['openid']]['bookCount'] = count($userCount[$book['openid']]);
                }else{
                    $books[$book['openid']]['bookCount'] = 0;
                }
            }
            usort($books,function($pre,$nex){
                if ($pre['distance'] == $nex['distance']) {
                    return 0;
                }
                return ($pre['distance'] < $nex['distance']) ? -1 : 1;
            });
        }
        $this->duolaSite->checkBookAccount($this->openid,$this->schoolid,$this->weid);
        $links = $_W['siteroot'] .'app/'.$this->duolaSite->createMobileUrl('bookmap',array('schoolid' => $this->schoolid));
        $imgUrl = $this->bookLogo;
        $data = array(
            'template'      => 'book/bookmap',
            'links'         => $links,
            'imgUrl'        => $imgUrl,
            'books'         => $books,
            'cats'          => $cats,
            'bookCats'      => $bookCats,
            'bookAge'       => $dict['book_age'],
            'bookLb'        => $dict['book_lb'],
            'bookDistance'  => $dict['book_distance'],
        );
        return $this->commonReturn($data);
    }

    /**
     * 闲书新增
     * @return array
     */
    public function scanBookCode(){
        global $_GPC;
        $isbn = $_GPC['isbn'];
        if(empty($isbn)){
            $this->formatJsonData(array(
                'result'    => false,
                'msg'       => '条形码有误!',
                'errorCode' => 1
            ));
        }
        if($isbn){
            //查询数据库
            $data = explode(',',$isbn);
            if($data[0] == 'EAN_13'){
                $book = pdo_fetch("SELECT * FROM " . tablename($this->duolaSite->table_book) . " WHERE  :isbn13 = isbn13 ", array(':isbn13' => $data[1]));
            }else{
                $book = pdo_fetch("SELECT * FROM " . tablename($this->duolaSite->table_book) . " WHERE  :isbn10 = isbn10 ", array(':isbn10' => $data[1]));
            }
            if(empty($book)){
                //查询第三方接口
                $apiUrl =  'http://feedback.api.juhe.cn/ISBN?key=59204c5e3bff16f6fcf7a29fb59a7033&sub='.$data[1];
                $bookInfo = $this->curlRequest($apiUrl);
                if($bookInfo['error_code'] == 0){
                    $book = $bookInfo['result'];
                    $pattern = '/(\d+\.?\d?)/';
                    $matches = array();
                    $price = 0;
                    if(preg_match($pattern,$book['price'],$matches)){
                        $price = $matches[1];
                    }
                    //将数据存入数据库
                    $insertData = array(
                        'title' => $book['title'],
                        'levelNum' => $book['levelNum'],
                        'subtitle' => $book['subtitle'],
                        'author' => $book['author'],
                        'pubdate' => $book['pubdate'],
                        'origin_title' => $book['origin_title'],
                        'binding' => $book['binding'],
                        'pages' => $book['pages'],
                        'images_medium' => $book['images_medium'],
                        'images_large' => $book['images_large'],
                        'publisher' => $book['publisher'],
                        'isbn10' => $book['isbn10'],
                        'isbn13' => $book['isbn13'],
                        'summary' => $book['summary'],
                        'price' => $price,
                    );
                    pdo_insert($this->duolaSite->table_book,$insertData);
                    $bookid = pdo_insertid();
                    $book['id'] = $bookid;
                }else{
                    //查询豆瓣api尝试
                    $apiUrl =  'https://api.douban.com/v2/book/isbn/'.$data[1];
                    $bookInfo = $this->curlRequest($apiUrl);
                    if($bookInfo['code']){
                        $this->formatJsonData(array(
                            'result'    => false,
                            'msg'       => '条码库持续更新中,请后续关注!',
                            'errorCode' => 2
                        ));
                    }
                    $pattern = '/(\d+\.?\d?)/';
                    $matches = array();
                    $price = 0;
                    if(preg_match($pattern,$bookInfo['price'],$matches)){
                        $price = $matches[1];
                    }
                    $book = array(
                        'title' => $bookInfo['title'],
                        'levelNum' => $bookInfo['rating']['numRaters'],
                        'subtitle' => $bookInfo['subtitle'],
                        'author' => trim(',',implode($bookInfo['author']),','),
                        'pubdate' => $bookInfo['pubdate'],
                        'origin_title' => $bookInfo['origin_title'],
                        'binding' => $bookInfo['binding'],
                        'pages' => $bookInfo['pages'],
                        'images_medium' => $bookInfo['images']['medium'],
                        'images_large' => $bookInfo['images']['large'],
                        'publisher' => $bookInfo['publisher'],
                        'isbn10' => $bookInfo['isbn10'],
                        'isbn13' => $bookInfo['isbn13'],
                        'summary' => $bookInfo['summary'],
                        'price' => $price,
                    );
                    pdo_insert($this->duolaSite->table_book,$book);
                    $bookid = pdo_insertid();
                    $book['id'] = $bookid;
                }
            }else{
                //查询是否已经扫码上架过
                $bookCount = pdo_fetch("select count(*) as bookCount from ".tablename($this->duolaSite->table_mybook)." where openid = :openid and bookid = :bookid  and is_delete = :is_delete ",array(':openid' => $this->openid,':bookid' => $book['id'],':is_delete' => 1));
                if($bookCount['bookCount'] > 0){
                    $this->formatJsonData(array(
                        'result'    => false,
                        'msg'       => '书已在库,不能重读上架!',
                        'errorCode' => 3
                    ));
                }
            }
        }
        if(empty($book['title']) || empty($book['author']) || empty(floatval($book['price']))){
            $this->formatJsonData(array(
                'result'    => false,
                'msg'       => '图书信息不全!',
                'errorCode' => 2
            ));
        }else{
            $this->formatJsonData(array(
                'result'    => true,
                'msg'       => '扫码成功!',
                'showData'  => array(
                    'bookId' => $book['id'],
                    'isbn'   => $isbn
                )
            ));
        }
    }

    public function addBook(){
        $this->checkSubmitData();
        global $_GPC,$_W;
        load()->func('communication');
        load()->classs('weixin.account');
        load()->func('file');
        $accObj= WeixinAccount::create($_W['account']['acid']);
        $accObj->clearAccessToken();
        $access_token = $accObj->fetch_token();
        $token =  $access_token;
        //获取图片
        $coverImgUrl = $_GPC ['coverImg'];
        if(!empty($coverImgUrl)) {
            $url = 'http://file.api.weixin.qq.com/cgi-bin/media/get?access_token='.$token.'&media_id='.$coverImgUrl;
            $pic_data = ihttp_request($url);
            $path = "images/";
            $coverImg = $path.random(30) .".jpg";
            file_write($coverImg,$pic_data['content']);
            if (!empty($_W['setting']['remote']['type'])) { //
                $remotestatus = file_remote_upload($coverImg); //
                if (is_error($remotestatus)) {
                    message('远程附件上传失败，请检查配置并重新上传');
                }
            }
        }

        $backImgUrl = $_GPC ['backImg'];
        if(!empty($backImgUrl)) {
            $url = 'http://file.api.weixin.qq.com/cgi-bin/media/get?access_token='.$token.'&media_id='.$backImgUrl;
            $pic_data = ihttp_request($url);
            $path = "images/";
            $backImg = $path.random(30) .".jpg";
            file_write($backImg,$pic_data['content']);
            if (!empty($_W['setting']['remote']['type'])) { //
                $remotestatus = file_remote_upload($backImg); //
                if (is_error($remotestatus)) {
                    message('远程附件上传失败，请检查配置并重新上传');
                }
            }
        }
        if(!$_GPC ['id']){
            $this->formatJsonData(array (
                'result' => false,
                'msg' => '非法请求！'
            ));
        }
        //更新book
        $updateData = array(
            'cat_id' => $_GPC['cat_id'],
            'age_id' => $_GPC['age_id']
        );
        pdo_update($this->duolaSite->table_book,$updateData,array('id' => $_GPC['id']));
        $myBookData = array(
            'weid' => $this->weid,
            'schoolid' => $this->schoolid,
            'openid' => $this->openid,
            'bookid' => $_GPC['id'],
            'status' => 1,
            'coverImg' => $coverImg,
            'backImg' => $backImg,
            'inDate' => time(),
            'lat' => $this->userInfo['lat'],
            'lng' => $this->userInfo['lng']
        );
        pdo_insert($this->duolaSite->table_mybook,$myBookData);
        $this->formatJsonData(array(
            'result' => true,
            'msg'    => '上架成功!'
        ));
    }

    public function showAddBookData(){
        global $_GPC;
        $dict = $this->getDictionary();
        load()->classs('weixin.account');
        $accObj= WeixinAccount::create($this->weid);
        $access_token = $accObj->fetch_token();
        $book = pdo_fetch("SELECT * FROM " . tablename($this->duolaSite->table_book) . " WHERE  :id = id ", array(':id' => $_GPC['bookId']));
        $showData = array(
            'template'      => 'book/addbook2',
            'book'          => $book,
            'isbn'          => $_GPC['isbn'],
            'token'         => $access_token,
            'bookAge'       => $dict['book_age'],
            'bookLb'        => $dict['book_lb'],
            'bookDistance'  => $dict['book_distance'],
        );
        return $this->commonReturn($showData);
    }
    public function userInfoUpdate(){
        global $_GPC,$_W;
        if(empty($_GPC['type'])){
            $this->formatJsonData(array('result' => false,'msg' => '参数错误!'));
        }
        $condition = '';
        switch ($_GPC['type']){
            case 'bookUser':
            case 'parents':
                $condition = ' AND pid > 0';
                $registerUser = pdo_fetch("SELECT id,name,area_addr,sex FROM " . tablename($this->duolaSite->table_parents) . " WHERE openid = '{$this->openid}' AND  weid = {$this->weid} AND schoolid = {$this->schoolid} ");
                break;
            case 'teacher':
                $condition = ' AND tid > 0';
                $registerUser = pdo_fetch("SELECT id,tname as name,area_addr,sex FROM " . tablename($this->duolaSite->table_teachers) . " WHERE openid = '{$this->openid}' AND  weid = {$this->weid} AND schoolid = {$this->schoolid} ");
                break;
        }
        $userInfo = pdo_fetch("SELECT id ,uid ,userinfo FROM " . tablename($this->duolaSite->table_user) . " WHERE openid = '{$this->openid}' AND  weid = {$this->weid} AND schoolid = {$this->schoolid}  {$condition}");
        $userData = array();
        if(!empty($userInfo)){
            $userData = iunserializer($userInfo['userinfo']);
            $userData['name'] = $registerUser['name'];
            $userData['area_addr'] = $registerUser['area_addr'];
        }
        $links = $_W['siteroot'] .'app/'.$this->duolaSite->createMobileUrl('bangding',array('schoolid' => $this->schoolid,'userType' => 'bookUser','typeName' => '闲书用户信息完善'));
        $imgUrl = $this->bookLogo;
        $fans = pdo_fetch("select follow FROM ".tablename('mc_mapping_fans')." WHERE acid = '{$this->weid}' And openid = '{$this->openid}' ");
        $data = array(
            'template'      => 'user_info_update',
            'links'         => $links,
            'imgUrl'        => $imgUrl,
            'userType'      => 'bookUser',
            'typeName'      => '闲书用户信息完善',
            'fans'          => $fans,
            'userData'      => $userData,
            'registerUserId'=>$registerUser['id'],
            'userId'        => $userInfo['id'],
        );
        return $this->commonReturn($data);
    }

    public function updateInfo(){
        global $_GPC;
        if(empty($_GPC['type']) || empty($_GPC['registerUserId'])){
            $this->formatJsonData(array('result' => false,'msg' => '参数错误!'));
        }
        if($_GPC['type'] == 'bookUser'){
            $registerUser = pdo_fetch("SELECT name,area_addr,sex FROM " . tablename($this->duolaSite->table_parents) . " WHERE id = {$_GPC['registerUserId']} ");
            if(!empty($registerUser)){
                $temp = array(
                    'name' => trim($_GPC['name']),
                    'mobile' => $_GPC['mobile'],
                    'area_addr' => trim($_GPC['home_address']),
                    'area_addr_location' => json_encode(array('lng' => trim($_GPC['lng']),'lat' => trim($_GPC['lat'])))
                );
                pdo_update($this->duolaSite->table_parents,$temp,array('id' => $_GPC['registerUserId']));
            }
        }else{
            $registerUser = pdo_fetch("SELECT tname,area_addr,sex FROM " . tablename($this->duolaSite->table_teachers) . " WHERE id = {$_GPC['registerUserId']} ");
            if(!empty($registerUser)){
                $temp = array(
                    'tname' => trim($_GPC['name']),
                    'mobile' => $_GPC['mobile'],
                    'area_addr' => trim($_GPC['home_address']),
                    'sex'       => $_GPC['sex'],
                    'area_addr_location' => json_encode(array('lng' => trim($_GPC['lng']),'lat' => trim($_GPC['lat'])))
                );
                pdo_update($this->duolaSite->table_teachers,$temp,array('id' => $_GPC['registerUserId']));
            }
        }
        $info = array ('name' => $_GPC['name'],'mobile' => $_GPC['mobile'],'lng' => trim($_GPC['lng']),'lat' => trim($_GPC['lat']));
        pdo_update($this->duolaSite->table_user,array('userinfo' => iserializer($info)),array('id' => $_GPC['userId']));
        $this->formatJsonData(array(
            'result' => true,
            'msg'    => '更新成功!'
        ));
    }
}